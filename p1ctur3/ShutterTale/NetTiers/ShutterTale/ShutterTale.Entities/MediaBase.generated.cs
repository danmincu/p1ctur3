
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : July 10, 2013
	Important: Do not modify this file. Edit the file Media.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using ShutterTale.Entities.Validation;
#endregion

namespace ShutterTale.Entities
{
	///<summary>
	/// An object representation of the 'Media' table. [No description found the database]	
	///</summary>
	[DataContract]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MediaBase : EntityBase, IMedia, IEntityId<MediaKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		[DataMember]
		private MediaEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		[DataMember]
		private MediaEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MediaEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		private TList<Media> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		public event MediaEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		public event MediaEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MediaBase"/> instance.
		///</summary>
		public MediaBase()
		{
			this.entityData = new MediaEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MediaBase"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_captureDateTime"></param>
		///<param name="_fileDateTime"></param>
		///<param name="_importDateTime"></param>
		///<param name="_location"></param>
		///<param name="_pixelx"></param>
		///<param name="_pixely"></param>
		///<param name="_dpi"></param>
		///<param name="_contentType"></param>
		///<param name="_make"></param>
		///<param name="_model"></param>
		///<param name="_softwareVersion"></param>
		///<param name="_origin"></param>
		///<param name="_size"></param>
		///<param name="_quadkey18"></param>
		public MediaBase(System.Guid _id, System.DateTime? _captureDateTime, System.DateTime _fileDateTime, 
			System.DateTime _importDateTime, System.Object _location, System.Int32 _pixelx, System.Int32 _pixely, 
			System.Double _dpi, System.String _contentType, System.String _make, System.String _model, System.String _softwareVersion, 
			System.String _origin, System.Int32 _size, System.String _quadkey18)
		{
			this.entityData = new MediaEntityData();
			this.backupData = null;

			this.Id = _id;
			this.CaptureDateTime = _captureDateTime;
			this.FileDateTime = _fileDateTime;
			this.ImportDateTime = _importDateTime;
			this.Location = _location;
			this.Pixelx = _pixelx;
			this.Pixely = _pixely;
			this.Dpi = _dpi;
			this.ContentType = _contentType;
			this.Make = _make;
			this.Model = _model;
			this.SoftwareVersion = _softwareVersion;
			this.Origin = _origin;
			this.Size = _size;
			this.Quadkey18 = _quadkey18;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Media"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_captureDateTime"></param>
		///<param name="_fileDateTime"></param>
		///<param name="_importDateTime"></param>
		///<param name="_location"></param>
		///<param name="_pixelx"></param>
		///<param name="_pixely"></param>
		///<param name="_dpi"></param>
		///<param name="_contentType"></param>
		///<param name="_make"></param>
		///<param name="_model"></param>
		///<param name="_softwareVersion"></param>
		///<param name="_origin"></param>
		///<param name="_size"></param>
		///<param name="_quadkey18"></param>
		public static Media CreateMedia(System.Guid _id, System.DateTime? _captureDateTime, System.DateTime _fileDateTime, 
			System.DateTime _importDateTime, System.Object _location, System.Int32 _pixelx, System.Int32 _pixely, 
			System.Double _dpi, System.String _contentType, System.String _make, System.String _model, System.String _softwareVersion, 
			System.String _origin, System.Int32 _size, System.String _quadkey18)
		{
			Media newMedia = new Media();
			newMedia.Id = _id;
			newMedia.CaptureDateTime = _captureDateTime;
			newMedia.FileDateTime = _fileDateTime;
			newMedia.ImportDateTime = _importDateTime;
			newMedia.Location = _location;
			newMedia.Pixelx = _pixelx;
			newMedia.Pixely = _pixely;
			newMedia.Dpi = _dpi;
			newMedia.ContentType = _contentType;
			newMedia.Make = _make;
			newMedia.Model = _model;
			newMedia.SoftwareVersion = _softwareVersion;
			newMedia.Origin = _origin;
			newMedia.Size = _size;
			newMedia.Quadkey18 = _quadkey18;
			return newMedia;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "Id is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public override System.Guid Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(MediaColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the Id property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the Id property.</remarks>
		/// <value>This type is uniqueidentifier</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Guid OriginalId
		{
			get { return this.entityData.OriginalId; }
			set { this.entityData.OriginalId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the CaptureDateTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CaptureDateTime
		{
			get
			{
				return this.entityData.CaptureDateTime; 
			}
			
			set
			{
				if (this.entityData.CaptureDateTime == value)
					return;
				
                OnPropertyChanging("CaptureDateTime");                    
				OnColumnChanging(MediaColumn.CaptureDateTime, this.entityData.CaptureDateTime);
				this.entityData.CaptureDateTime = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaColumn.CaptureDateTime, this.entityData.CaptureDateTime);
				OnPropertyChanged("CaptureDateTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FileDateTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "FileDateTime is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime FileDateTime
		{
			get
			{
				return this.entityData.FileDateTime; 
			}
			
			set
			{
				if (this.entityData.FileDateTime == value)
					return;
				
                OnPropertyChanging("FileDateTime");                    
				OnColumnChanging(MediaColumn.FileDateTime, this.entityData.FileDateTime);
				this.entityData.FileDateTime = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaColumn.FileDateTime, this.entityData.FileDateTime);
				OnPropertyChanged("FileDateTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ImportDateTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "ImportDateTime is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ImportDateTime
		{
			get
			{
				return this.entityData.ImportDateTime; 
			}
			
			set
			{
				if (this.entityData.ImportDateTime == value)
					return;
				
                OnPropertyChanging("ImportDateTime");                    
				OnColumnChanging(MediaColumn.ImportDateTime, this.entityData.ImportDateTime);
				this.entityData.ImportDateTime = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaColumn.ImportDateTime, this.entityData.ImportDateTime);
				OnPropertyChanged("ImportDateTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Location property. 
		///		
		/// </summary>
		/// <value>This type is geography.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Object Location
		{
			get
			{
				return this.entityData.Location; 
			}
			
			set
			{
				if (this.entityData.Location == value)
					return;
				
                OnPropertyChanging("Location");                    
				OnColumnChanging(MediaColumn.Location, this.entityData.Location);
				this.entityData.Location = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaColumn.Location, this.entityData.Location);
				OnPropertyChanged("Location");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Pixelx property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "Pixelx is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Pixelx
		{
			get
			{
				return this.entityData.Pixelx; 
			}
			
			set
			{
				if (this.entityData.Pixelx == value)
					return;
				
                OnPropertyChanging("Pixelx");                    
				OnColumnChanging(MediaColumn.Pixelx, this.entityData.Pixelx);
				this.entityData.Pixelx = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaColumn.Pixelx, this.entityData.Pixelx);
				OnPropertyChanged("Pixelx");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Pixely property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "Pixely is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Pixely
		{
			get
			{
				return this.entityData.Pixely; 
			}
			
			set
			{
				if (this.entityData.Pixely == value)
					return;
				
                OnPropertyChanging("Pixely");                    
				OnColumnChanging(MediaColumn.Pixely, this.entityData.Pixely);
				this.entityData.Pixely = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaColumn.Pixely, this.entityData.Pixely);
				OnPropertyChanged("Pixely");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Dpi property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "Dpi is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Double Dpi
		{
			get
			{
				return this.entityData.Dpi; 
			}
			
			set
			{
				if (this.entityData.Dpi == value)
					return;
				
                OnPropertyChanging("Dpi");                    
				OnColumnChanging(MediaColumn.Dpi, this.entityData.Dpi);
				this.entityData.Dpi = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaColumn.Dpi, this.entityData.Dpi);
				OnPropertyChanged("Dpi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContentType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "ContentType is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.String ContentType
		{
			get
			{
				return this.entityData.ContentType; 
			}
			
			set
			{
				if (this.entityData.ContentType == value)
					return;
				
                OnPropertyChanging("ContentType");                    
				OnColumnChanging(MediaColumn.ContentType, this.entityData.ContentType);
				this.entityData.ContentType = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaColumn.ContentType, this.entityData.ContentType);
				OnPropertyChanged("ContentType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Make property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Make
		{
			get
			{
				return this.entityData.Make; 
			}
			
			set
			{
				if (this.entityData.Make == value)
					return;
				
                OnPropertyChanging("Make");                    
				OnColumnChanging(MediaColumn.Make, this.entityData.Make);
				this.entityData.Make = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaColumn.Make, this.entityData.Make);
				OnPropertyChanged("Make");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Model property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Model
		{
			get
			{
				return this.entityData.Model; 
			}
			
			set
			{
				if (this.entityData.Model == value)
					return;
				
                OnPropertyChanging("Model");                    
				OnColumnChanging(MediaColumn.Model, this.entityData.Model);
				this.entityData.Model = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaColumn.Model, this.entityData.Model);
				OnPropertyChanged("Model");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SoftwareVersion property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String SoftwareVersion
		{
			get
			{
				return this.entityData.SoftwareVersion; 
			}
			
			set
			{
				if (this.entityData.SoftwareVersion == value)
					return;
				
                OnPropertyChanging("SoftwareVersion");                    
				OnColumnChanging(MediaColumn.SoftwareVersion, this.entityData.SoftwareVersion);
				this.entityData.SoftwareVersion = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaColumn.SoftwareVersion, this.entityData.SoftwareVersion);
				OnPropertyChanged("SoftwareVersion");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Origin property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "Origin is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.String Origin
		{
			get
			{
				return this.entityData.Origin; 
			}
			
			set
			{
				if (this.entityData.Origin == value)
					return;
				
                OnPropertyChanging("Origin");                    
				OnColumnChanging(MediaColumn.Origin, this.entityData.Origin);
				this.entityData.Origin = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaColumn.Origin, this.entityData.Origin);
				OnPropertyChanged("Origin");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Size property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "Size is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Size
		{
			get
			{
				return this.entityData.Size; 
			}
			
			set
			{
				if (this.entityData.Size == value)
					return;
				
                OnPropertyChanging("Size");                    
				OnColumnChanging(MediaColumn.Size, this.entityData.Size);
				this.entityData.Size = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaColumn.Size, this.entityData.Size);
				OnPropertyChanged("Size");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Quadkey18 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "Quadkey18 is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 18)]
		public virtual System.String Quadkey18
		{
			get
			{
				return this.entityData.Quadkey18; 
			}
			
			set
			{
				if (this.entityData.Quadkey18 == value)
					return;
				
                OnPropertyChanging("Quadkey18");                    
				OnColumnChanging(MediaColumn.Quadkey18, this.entityData.Quadkey18);
				this.entityData.Quadkey18 = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaColumn.Quadkey18, this.entityData.Quadkey18);
				OnPropertyChanged("Quadkey18");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections

		/// <summary>
		///	Holds a MediaImage object
		///	which is related to this object through the relation MediaImage
		/// </summary>
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual MediaImage MediaImage
		{
			get { return entityData.MediaImage; }
			set { entityData.MediaImage = value; }	
		}

		/// <summary>
		///	Holds a MediaAudio object
		///	which is related to this object through the relation MediaAudio
		/// </summary>
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual MediaAudio MediaAudio
		{
			get { return entityData.MediaAudio; }
			set { entityData.MediaAudio = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Previews objects
		///	which are related to this object through the relation FK_MediaPreview
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Previews> PreviewsCollection
		{
			get { return entityData.PreviewsCollection; }
			set { entityData.PreviewsCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ContentType", "Content Type"));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Origin", "Origin"));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Quadkey18", "Quadkey18"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Quadkey18", "Quadkey18", 18));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Media"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "CaptureDateTime", "FileDateTime", "ImportDateTime", "Location", "PixelX", "PixelY", "Dpi", "ContentType", "Make", "Model", "SoftwareVersion", "Origin", "Size", "Quadkey18"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MediaEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Media) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Media>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Media);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Media Entity 
		///</summary>
		protected virtual Media Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Media copy = new Media();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
					copy.OriginalId = this.OriginalId;
				copy.CaptureDateTime = this.CaptureDateTime;
				copy.FileDateTime = this.FileDateTime;
				copy.ImportDateTime = this.ImportDateTime;
				copy.Location = this.Location;
				copy.Pixelx = this.Pixelx;
				copy.Pixely = this.Pixely;
				copy.Dpi = this.Dpi;
				copy.ContentType = this.ContentType;
				copy.Make = this.Make;
				copy.Model = this.Model;
				copy.SoftwareVersion = this.SoftwareVersion;
				copy.Origin = this.Origin;
				copy.Size = this.Size;
				copy.Quadkey18 = this.Quadkey18;
			
		
			//deep copy nested objects
			copy.MediaImage = (MediaImage) MakeCopyOf(this.MediaImage, existingCopies); 
			copy.MediaAudio = (MediaAudio) MakeCopyOf(this.MediaAudio, existingCopies); 
			copy.PreviewsCollection = (TList<Previews>) MakeCopyOf(this.PreviewsCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Media Entity 
		///</summary>
		public virtual Media Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Media Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Media DeepCopy()
		{
			return EntityHelper.Clone<Media>(this as Media);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MediaEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MediaEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MediaEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MediaColumn column)
		{
			switch(column)
			{
					case MediaColumn.Id:
					return entityData.Id != _originalData.Id;
					case MediaColumn.CaptureDateTime:
					return entityData.CaptureDateTime != _originalData.CaptureDateTime;
					case MediaColumn.FileDateTime:
					return entityData.FileDateTime != _originalData.FileDateTime;
					case MediaColumn.ImportDateTime:
					return entityData.ImportDateTime != _originalData.ImportDateTime;
					case MediaColumn.Location:
					return entityData.Location != _originalData.Location;
					case MediaColumn.Pixelx:
					return entityData.Pixelx != _originalData.Pixelx;
					case MediaColumn.Pixely:
					return entityData.Pixely != _originalData.Pixely;
					case MediaColumn.Dpi:
					return entityData.Dpi != _originalData.Dpi;
					case MediaColumn.ContentType:
					return entityData.ContentType != _originalData.ContentType;
					case MediaColumn.Make:
					return entityData.Make != _originalData.Make;
					case MediaColumn.Model:
					return entityData.Model != _originalData.Model;
					case MediaColumn.SoftwareVersion:
					return entityData.SoftwareVersion != _originalData.SoftwareVersion;
					case MediaColumn.Origin:
					return entityData.Origin != _originalData.Origin;
					case MediaColumn.Size:
					return entityData.Size != _originalData.Size;
					case MediaColumn.Quadkey18:
					return entityData.Quadkey18 != _originalData.Quadkey18;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MediaColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.CaptureDateTime != _originalData.CaptureDateTime;
			result = result || entityData.FileDateTime != _originalData.FileDateTime;
			result = result || entityData.ImportDateTime != _originalData.ImportDateTime;
			result = result || entityData.Location != _originalData.Location;
			result = result || entityData.Pixelx != _originalData.Pixelx;
			result = result || entityData.Pixely != _originalData.Pixely;
			result = result || entityData.Dpi != _originalData.Dpi;
			result = result || entityData.ContentType != _originalData.ContentType;
			result = result || entityData.Make != _originalData.Make;
			result = result || entityData.Model != _originalData.Model;
			result = result || entityData.SoftwareVersion != _originalData.SoftwareVersion;
			result = result || entityData.Origin != _originalData.Origin;
			result = result || entityData.Size != _originalData.Size;
			result = result || entityData.Quadkey18 != _originalData.Quadkey18;
			return result;
		}	
		
		///<summary>
		///  Returns a Media Entity with the original data.
		///</summary>
		public Media GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMedia(
				_originalData.Id,
				_originalData.CaptureDateTime,
				_originalData.FileDateTime,
				_originalData.ImportDateTime,
				_originalData.Location,
				_originalData.Pixelx,
				_originalData.Pixely,
				_originalData.Dpi,
				_originalData.ContentType,
				_originalData.Make,
				_originalData.Model,
				_originalData.SoftwareVersion,
				_originalData.Origin,
				_originalData.Size,
				_originalData.Quadkey18
				);
				
			return (Media)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MediaBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MediaBase)
				return ValueEquals(this, (MediaBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MediaBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.CaptureDateTime == null) ? string.Empty : this.CaptureDateTime.ToString()).GetHashCode() ^ 
					this.FileDateTime.GetHashCode() ^ 
					this.ImportDateTime.GetHashCode() ^ 
					((this.Location == null) ? string.Empty : this.Location.ToString()).GetHashCode() ^ 
					this.Pixelx.GetHashCode() ^ 
					this.Pixely.GetHashCode() ^ 
					this.Dpi.GetHashCode() ^ 
					this.ContentType.GetHashCode() ^ 
					((this.Make == null) ? string.Empty : this.Make.ToString()).GetHashCode() ^ 
					((this.Model == null) ? string.Empty : this.Model.ToString()).GetHashCode() ^ 
					((this.SoftwareVersion == null) ? string.Empty : this.SoftwareVersion.ToString()).GetHashCode() ^ 
					this.Origin.GetHashCode() ^ 
					this.Size.GetHashCode() ^ 
					this.Quadkey18.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MediaBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MediaBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MediaBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MediaBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MediaBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MediaBase Object1, MediaBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.CaptureDateTime != null && Object2.CaptureDateTime != null )
			{
				if (Object1.CaptureDateTime != Object2.CaptureDateTime)
					equal = false;
			}
			else if (Object1.CaptureDateTime == null ^ Object2.CaptureDateTime == null )
			{
				equal = false;
			}
			if (Object1.FileDateTime != Object2.FileDateTime)
				equal = false;
			if (Object1.ImportDateTime != Object2.ImportDateTime)
				equal = false;
			if ( Object1.Location != null && Object2.Location != null )
			{
				if (Object1.Location != Object2.Location)
					equal = false;
			}
			else if (Object1.Location == null ^ Object2.Location == null )
			{
				equal = false;
			}
			if (Object1.Pixelx != Object2.Pixelx)
				equal = false;
			if (Object1.Pixely != Object2.Pixely)
				equal = false;
			if (Object1.Dpi != Object2.Dpi)
				equal = false;
			if (Object1.ContentType != Object2.ContentType)
				equal = false;
			if ( Object1.Make != null && Object2.Make != null )
			{
				if (Object1.Make != Object2.Make)
					equal = false;
			}
			else if (Object1.Make == null ^ Object2.Make == null )
			{
				equal = false;
			}
			if ( Object1.Model != null && Object2.Model != null )
			{
				if (Object1.Model != Object2.Model)
					equal = false;
			}
			else if (Object1.Model == null ^ Object2.Model == null )
			{
				equal = false;
			}
			if ( Object1.SoftwareVersion != null && Object2.SoftwareVersion != null )
			{
				if (Object1.SoftwareVersion != Object2.SoftwareVersion)
					equal = false;
			}
			else if (Object1.SoftwareVersion == null ^ Object2.SoftwareVersion == null )
			{
				equal = false;
			}
			if (Object1.Origin != Object2.Origin)
				equal = false;
			if (Object1.Size != Object2.Size)
				equal = false;
			if (Object1.Quadkey18 != Object2.Quadkey18)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MediaBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MediaComparer GetComparer()
        {
            return new MediaComparer();
        }
        */

        // Comparer delegates back to Media
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Media rhs, MediaColumn which)
        {
            switch (which)
            {
            	
            	
            	case MediaColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case MediaColumn.CaptureDateTime:
            		return this.CaptureDateTime.Value.CompareTo(rhs.CaptureDateTime.Value);
            		
            		                 
            	
            	
            	case MediaColumn.FileDateTime:
            		return this.FileDateTime.CompareTo(rhs.FileDateTime);
            		
            		                 
            	
            	
            	case MediaColumn.ImportDateTime:
            		return this.ImportDateTime.CompareTo(rhs.ImportDateTime);
            		
            		                 
            	
            	
            	case MediaColumn.Location:
            		return this.Location.CompareTo(rhs.Location);
            		
            		                 
            	
            	
            	case MediaColumn.Pixelx:
            		return this.Pixelx.CompareTo(rhs.Pixelx);
            		
            		                 
            	
            	
            	case MediaColumn.Pixely:
            		return this.Pixely.CompareTo(rhs.Pixely);
            		
            		                 
            	
            	
            	case MediaColumn.Dpi:
            		return this.Dpi.CompareTo(rhs.Dpi);
            		
            		                 
            	
            	
            	case MediaColumn.ContentType:
            		return this.ContentType.CompareTo(rhs.ContentType);
            		
            		                 
            	
            	
            	case MediaColumn.Make:
            		return this.Make.CompareTo(rhs.Make);
            		
            		                 
            	
            	
            	case MediaColumn.Model:
            		return this.Model.CompareTo(rhs.Model);
            		
            		                 
            	
            	
            	case MediaColumn.SoftwareVersion:
            		return this.SoftwareVersion.CompareTo(rhs.SoftwareVersion);
            		
            		                 
            	
            	
            	case MediaColumn.Origin:
            		return this.Origin.CompareTo(rhs.Origin);
            		
            		                 
            	
            	
            	case MediaColumn.Size:
            		return this.Size.CompareTo(rhs.Size);
            		
            		                 
            	
            	
            	case MediaColumn.Quadkey18:
            		return this.Quadkey18.CompareTo(rhs.Quadkey18);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MediaKey> Members
		
		// member variable for the EntityId property
		private MediaKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MediaKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MediaKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Media")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- Id: {0}{15}- CaptureDateTime: {1}{15}- FileDateTime: {2}{15}- ImportDateTime: {3}{15}- Location: {4}{15}- Pixelx: {5}{15}- Pixely: {6}{15}- Dpi: {7}{15}- ContentType: {8}{15}- Make: {9}{15}- Model: {10}{15}- SoftwareVersion: {11}{15}- Origin: {12}{15}- Size: {13}{15}- Quadkey18: {14}{15}{17}", 
				this.Id,
				(this.CaptureDateTime == null) ? string.Empty : this.CaptureDateTime.ToString(),
				this.FileDateTime,
				this.ImportDateTime,
				(this.Location == null) ? string.Empty : this.Location.ToString(),
				this.Pixelx,
				this.Pixely,
				this.Dpi,
				this.ContentType,
				(this.Make == null) ? string.Empty : this.Make.ToString(),
				(this.Model == null) ? string.Empty : this.Model.ToString(),
				(this.SoftwareVersion == null) ? string.Empty : this.SoftwareVersion.ToString(),
				this.Origin,
				this.Size,
				this.Quadkey18,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Media' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[DataContract]
	internal protected class MediaEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Media"</remarks>
		[DataMember]
		public System.Guid Id;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		[DataMember]
		public System.Guid OriginalId;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// CaptureDateTime : 
		/// </summary>
		[DataMember]
		public System.DateTime? CaptureDateTime = null;
		
		/// <summary>
		/// FileDateTime : 
		/// </summary>
		[DataMember]
		public System.DateTime FileDateTime = DateTime.MinValue;
		
		/// <summary>
		/// ImportDateTime : 
		/// </summary>
		[DataMember]
		public System.DateTime ImportDateTime = DateTime.MinValue;
		
		/// <summary>
		/// Location : 
		/// </summary>
		[DataMember]
		public System.Object Location = null;
		
		/// <summary>
		/// PixelX : 
		/// </summary>
		[DataMember]
		public System.Int32 Pixelx = (int)0;
		
		/// <summary>
		/// PixelY : 
		/// </summary>
		[DataMember]
		public System.Int32 Pixely = (int)0;
		
		/// <summary>
		/// Dpi : 
		/// </summary>
		[DataMember]
		public System.Double Dpi = 0.0f;
		
		/// <summary>
		/// ContentType : 
		/// </summary>
		[DataMember]
		public System.String ContentType = string.Empty;
		
		/// <summary>
		/// Make : 
		/// </summary>
		[DataMember]
		public System.String Make = null;
		
		/// <summary>
		/// Model : 
		/// </summary>
		[DataMember]
		public System.String Model = null;
		
		/// <summary>
		/// SoftwareVersion : 
		/// </summary>
		[DataMember]
		public System.String SoftwareVersion = null;
		
		/// <summary>
		/// Origin : 
		/// </summary>
		[DataMember]
		public System.String Origin = string.Empty;
		
		/// <summary>
		/// Size : 
		/// </summary>
		[DataMember]
		public System.Int32 Size = (int)0;
		
		/// <summary>
		/// Quadkey18 : 
		/// </summary>
		[DataMember]
		public System.String Quadkey18 = string.Empty;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region MediaImage
		
		private MediaImage _mediaImageId;
		
		/// <summary>
		///	Holds a  MediaImage entity object
		///	which is related to this object through the relation _mediaImageId
		/// </summary>
		[DataMember]
		public MediaImage MediaImage
		{
			get {		return _mediaImageId;		}
			set { 	_mediaImageId = value; 	}
		}
		
		#endregion 

		#region MediaAudio
		
		private MediaAudio _mediaAudioId;
		
		/// <summary>
		///	Holds a  MediaAudio entity object
		///	which is related to this object through the relation _mediaAudioId
		/// </summary>
		[DataMember]
		public MediaAudio MediaAudio
		{
			get {		return _mediaAudioId;		}
			set { 	_mediaAudioId = value; 	}
		}
		
		#endregion 

		#region PreviewsCollection
		
		private TList<Previews> _previewsMediumId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _previewsMediumId
		/// </summary>
		[DataMember]
		public TList<Previews> PreviewsCollection
		{
			get
			{
				if (_previewsMediumId == null)
				{
				_previewsMediumId = new TList<Previews>();
				}
	
				return _previewsMediumId;
			}
			set { _previewsMediumId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MediaEntityData _tmp = new MediaEntityData();
						
			_tmp.Id = this.Id;
			_tmp.OriginalId = this.OriginalId;
			
			_tmp.CaptureDateTime = this.CaptureDateTime;
			_tmp.FileDateTime = this.FileDateTime;
			_tmp.ImportDateTime = this.ImportDateTime;
			_tmp.Location = this.Location;
			_tmp.Pixelx = this.Pixelx;
			_tmp.Pixely = this.Pixely;
			_tmp.Dpi = this.Dpi;
			_tmp.ContentType = this.ContentType;
			_tmp.Make = this.Make;
			_tmp.Model = this.Model;
			_tmp.SoftwareVersion = this.SoftwareVersion;
			_tmp.Origin = this.Origin;
			_tmp.Size = this.Size;
			_tmp.Quadkey18 = this.Quadkey18;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._mediaImageId != null)
				_tmp.MediaImage = (MediaImage) MakeCopyOf(this.MediaImage); 
			if (this._mediaAudioId != null)
				_tmp.MediaAudio = (MediaAudio) MakeCopyOf(this.MediaAudio); 
			if (this._previewsMediumId != null)
				_tmp.PreviewsCollection = (TList<Previews>) MakeCopyOf(this.PreviewsCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MediaEntityData _tmp = new MediaEntityData();
						
			_tmp.Id = this.Id;
			_tmp.OriginalId = this.OriginalId;
			
			_tmp.CaptureDateTime = this.CaptureDateTime;
			_tmp.FileDateTime = this.FileDateTime;
			_tmp.ImportDateTime = this.ImportDateTime;
			_tmp.Location = this.Location;
			_tmp.Pixelx = this.Pixelx;
			_tmp.Pixely = this.Pixely;
			_tmp.Dpi = this.Dpi;
			_tmp.ContentType = this.ContentType;
			_tmp.Make = this.Make;
			_tmp.Model = this.Model;
			_tmp.SoftwareVersion = this.SoftwareVersion;
			_tmp.Origin = this.Origin;
			_tmp.Size = this.Size;
			_tmp.Quadkey18 = this.Quadkey18;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.MediaImage = (MediaImage) MakeCopyOf(this.MediaImage, existingCopies); 
			_tmp.MediaAudio = (MediaAudio) MakeCopyOf(this.MediaAudio, existingCopies); 
			_tmp.PreviewsCollection = (TList<Previews>) MakeCopyOf(this.PreviewsCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region DataContract serialization
		
		bool _deserializing = false;
		
		/// <summary>
		/// Called before deserializing the type.
		/// </summary>
		[OnDeserializingAttribute]
		private void Initialize_BeforeDeserializing(StreamingContext context)
		{
			this._deserializing = true;
		
			this.entityData = new MediaEntityData();
			this.backupData = null;
			
			AddValidationRules();
		}
		
		/// <summary>
		/// Called after deserializing the type.
		/// </summary>
		[OnDeserializedAttribute ]
		private void Initialize_Deserialized(StreamingContext context)
		{
			this._deserializing = false;
		}
				
		#endregion
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MediaColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MediaColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MediaColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MediaColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MediaColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MediaColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				MediaEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MediaEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MediaColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MediaColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MediaEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MediaEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MediaEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Media"/> object.
	/// </remarks>
	public class MediaEventArgs : System.EventArgs
	{
		private MediaColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MediaEventArgs class.
		///</summary>
		public MediaEventArgs(MediaColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MediaEventArgs class.
		///</summary>
		public MediaEventArgs(MediaColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MediaColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MediaColumn" />
		public MediaColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Media related events.
	///</summary>
	public delegate void MediaEventHandler(object sender, MediaEventArgs e);
	
	#region MediaComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MediaComparer : System.Collections.Generic.IComparer<Media>
	{
		MediaColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MediaComparer"/> class.
        /// </summary>
		public MediaComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MediaComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MediaComparer(MediaColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Media"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Media"/> to compare.</param>
        /// <param name="b">The second <c>Media</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Media a, Media b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Media entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Media a, Media b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MediaColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MediaKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Media"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MediaKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MediaKey class.
		/// </summary>
		public MediaKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MediaKey class.
		/// </summary>
		public MediaKey(MediaBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MediaKey class.
		/// </summary>
		public MediaKey(System.Guid _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MediaBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MediaBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Guid _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Guid Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Guid) EntityUtil.ChangeType(values["Id"], typeof(System.Guid)) : Guid.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MediaColumn Enum
	
	/// <summary>
	/// Enumerate the Media columns.
	/// </summary>
	[Serializable]
	public enum MediaColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Guid), System.Data.DbType.Guid, true, false, false)]
		Id = 1,
		/// <summary>
		/// CaptureDateTime : 
		/// </summary>
		[EnumTextValue("Capture Date Time")]
		[ColumnEnum("CaptureDateTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CaptureDateTime = 2,
		/// <summary>
		/// FileDateTime : 
		/// </summary>
		[EnumTextValue("File Date Time")]
		[ColumnEnum("FileDateTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		FileDateTime = 3,
		/// <summary>
		/// ImportDateTime : 
		/// </summary>
		[EnumTextValue("Import Date Time")]
		[ColumnEnum("ImportDateTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ImportDateTime = 4,
		/// <summary>
		/// Location : 
		/// </summary>
		[EnumTextValue("Location")]
		[ColumnEnum("Location", typeof(System.Object), System.Data.DbType.Object, false, false, true)]
		Location = 5,
		/// <summary>
		/// Pixelx : 
		/// </summary>
		[EnumTextValue("Pixelx")]
		[ColumnEnum("PixelX", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Pixelx = 6,
		/// <summary>
		/// Pixely : 
		/// </summary>
		[EnumTextValue("Pixely")]
		[ColumnEnum("PixelY", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Pixely = 7,
		/// <summary>
		/// Dpi : 
		/// </summary>
		[EnumTextValue("Dpi")]
		[ColumnEnum("Dpi", typeof(System.Double), System.Data.DbType.Double, false, false, false)]
		Dpi = 8,
		/// <summary>
		/// ContentType : 
		/// </summary>
		[EnumTextValue("Content Type")]
		[ColumnEnum("ContentType", typeof(System.String), System.Data.DbType.String, false, false, false)]
		ContentType = 9,
		/// <summary>
		/// Make : 
		/// </summary>
		[EnumTextValue("Make")]
		[ColumnEnum("Make", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Make = 10,
		/// <summary>
		/// Model : 
		/// </summary>
		[EnumTextValue("Model")]
		[ColumnEnum("Model", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Model = 11,
		/// <summary>
		/// SoftwareVersion : 
		/// </summary>
		[EnumTextValue("Software Version")]
		[ColumnEnum("SoftwareVersion", typeof(System.String), System.Data.DbType.String, false, false, true)]
		SoftwareVersion = 12,
		/// <summary>
		/// Origin : 
		/// </summary>
		[EnumTextValue("Origin")]
		[ColumnEnum("Origin", typeof(System.String), System.Data.DbType.String, false, false, false)]
		Origin = 13,
		/// <summary>
		/// Size : 
		/// </summary>
		[EnumTextValue("Size")]
		[ColumnEnum("Size", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Size = 14,
		/// <summary>
		/// Quadkey18 : 
		/// </summary>
		[EnumTextValue("Quadkey18")]
		[ColumnEnum("Quadkey18", typeof(System.String), System.Data.DbType.String, false, false, false, 18)]
		Quadkey18 = 15
	}//End enum

	#endregion MediaColumn Enum

} // end namespace
