
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : July 10, 2013
	Important: Do not modify this file. Edit the file MediaImage.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using ShutterTale.Entities.Validation;
#endregion

namespace ShutterTale.Entities
{
	///<summary>
	/// An object representation of the 'Media_Image' table. [No description found the database]	
	///</summary>
	[DataContract]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MediaImageBase : EntityBase, IMediaImage, IEntityId<MediaImageKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		[DataMember]
		private MediaImageEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		[DataMember]
		private MediaImageEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MediaImageEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		private TList<MediaImage> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		public event MediaImageEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		public event MediaImageEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MediaImageBase"/> instance.
		///</summary>
		public MediaImageBase()
		{
			this.entityData = new MediaImageEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MediaImageBase"/> instance.
		///</summary>
		///<param name="_orientation"></param>
		///<param name="_ycbCrPositioning"></param>
		///<param name="_exposureTime"></param>
		///<param name="_fnumber"></param>
		///<param name="_exposureProgram"></param>
		///<param name="_isoSpeedRatings"></param>
		///<param name="_shutterSpeedValue"></param>
		///<param name="_apertureValue"></param>
		///<param name="_meteringMode"></param>
		///<param name="_flash"></param>
		///<param name="_focalLength"></param>
		///<param name="_flashpixVersion"></param>
		///<param name="_colorSpace"></param>
		///<param name="_sensingMethod"></param>
		///<param name="_exposureMode"></param>
		///<param name="_whiteBalance"></param>
		///<param name="_sceneCaptureType"></param>
		///<param name="_sharpness"></param>
		///<param name="_id"></param>
		public MediaImageBase(System.Byte? _orientation, System.Byte? _ycbCrPositioning, System.Double? _exposureTime, 
			System.Double? _fnumber, System.Byte? _exposureProgram, System.Int16? _isoSpeedRatings, 
			System.Double? _shutterSpeedValue, System.Double? _apertureValue, System.Byte? _meteringMode, 
			System.Byte? _flash, System.Double? _focalLength, System.String _flashpixVersion, System.Byte? _colorSpace, 
			System.Byte? _sensingMethod, System.Byte? _exposureMode, System.Byte? _whiteBalance, System.Byte? _sceneCaptureType, 
			System.Byte? _sharpness, System.Guid _id)
		{
			this.entityData = new MediaImageEntityData();
			this.backupData = null;

			this.Orientation = _orientation;
			this.YcbCrPositioning = _ycbCrPositioning;
			this.ExposureTime = _exposureTime;
			this.Fnumber = _fnumber;
			this.ExposureProgram = _exposureProgram;
			this.IsoSpeedRatings = _isoSpeedRatings;
			this.ShutterSpeedValue = _shutterSpeedValue;
			this.ApertureValue = _apertureValue;
			this.MeteringMode = _meteringMode;
			this.Flash = _flash;
			this.FocalLength = _focalLength;
			this.FlashpixVersion = _flashpixVersion;
			this.ColorSpace = _colorSpace;
			this.SensingMethod = _sensingMethod;
			this.ExposureMode = _exposureMode;
			this.WhiteBalance = _whiteBalance;
			this.SceneCaptureType = _sceneCaptureType;
			this.Sharpness = _sharpness;
			this.Id = _id;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="MediaImage"/> instance.
		///</summary>
		///<param name="_orientation"></param>
		///<param name="_ycbCrPositioning"></param>
		///<param name="_exposureTime"></param>
		///<param name="_fnumber"></param>
		///<param name="_exposureProgram"></param>
		///<param name="_isoSpeedRatings"></param>
		///<param name="_shutterSpeedValue"></param>
		///<param name="_apertureValue"></param>
		///<param name="_meteringMode"></param>
		///<param name="_flash"></param>
		///<param name="_focalLength"></param>
		///<param name="_flashpixVersion"></param>
		///<param name="_colorSpace"></param>
		///<param name="_sensingMethod"></param>
		///<param name="_exposureMode"></param>
		///<param name="_whiteBalance"></param>
		///<param name="_sceneCaptureType"></param>
		///<param name="_sharpness"></param>
		///<param name="_id"></param>
		public static MediaImage CreateMediaImage(System.Byte? _orientation, System.Byte? _ycbCrPositioning, System.Double? _exposureTime, 
			System.Double? _fnumber, System.Byte? _exposureProgram, System.Int16? _isoSpeedRatings, 
			System.Double? _shutterSpeedValue, System.Double? _apertureValue, System.Byte? _meteringMode, 
			System.Byte? _flash, System.Double? _focalLength, System.String _flashpixVersion, System.Byte? _colorSpace, 
			System.Byte? _sensingMethod, System.Byte? _exposureMode, System.Byte? _whiteBalance, System.Byte? _sceneCaptureType, 
			System.Byte? _sharpness, System.Guid _id)
		{
			MediaImage newMediaImage = new MediaImage();
			newMediaImage.Orientation = _orientation;
			newMediaImage.YcbCrPositioning = _ycbCrPositioning;
			newMediaImage.ExposureTime = _exposureTime;
			newMediaImage.Fnumber = _fnumber;
			newMediaImage.ExposureProgram = _exposureProgram;
			newMediaImage.IsoSpeedRatings = _isoSpeedRatings;
			newMediaImage.ShutterSpeedValue = _shutterSpeedValue;
			newMediaImage.ApertureValue = _apertureValue;
			newMediaImage.MeteringMode = _meteringMode;
			newMediaImage.Flash = _flash;
			newMediaImage.FocalLength = _focalLength;
			newMediaImage.FlashpixVersion = _flashpixVersion;
			newMediaImage.ColorSpace = _colorSpace;
			newMediaImage.SensingMethod = _sensingMethod;
			newMediaImage.ExposureMode = _exposureMode;
			newMediaImage.WhiteBalance = _whiteBalance;
			newMediaImage.SceneCaptureType = _sceneCaptureType;
			newMediaImage.Sharpness = _sharpness;
			newMediaImage.Id = _id;
			return newMediaImage;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Orientation property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte? Orientation
		{
			get
			{
				return this.entityData.Orientation; 
			}
			
			set
			{
				if (this.entityData.Orientation == value)
					return;
				
                OnPropertyChanging("Orientation");                    
				OnColumnChanging(MediaImageColumn.Orientation, this.entityData.Orientation);
				this.entityData.Orientation = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaImageColumn.Orientation, this.entityData.Orientation);
				OnPropertyChanged("Orientation");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the YcbCrPositioning property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte? YcbCrPositioning
		{
			get
			{
				return this.entityData.YcbCrPositioning; 
			}
			
			set
			{
				if (this.entityData.YcbCrPositioning == value)
					return;
				
                OnPropertyChanging("YcbCrPositioning");                    
				OnColumnChanging(MediaImageColumn.YcbCrPositioning, this.entityData.YcbCrPositioning);
				this.entityData.YcbCrPositioning = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaImageColumn.YcbCrPositioning, this.entityData.YcbCrPositioning);
				OnPropertyChanged("YcbCrPositioning");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExposureTime property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? ExposureTime
		{
			get
			{
				return this.entityData.ExposureTime; 
			}
			
			set
			{
				if (this.entityData.ExposureTime == value)
					return;
				
                OnPropertyChanging("ExposureTime");                    
				OnColumnChanging(MediaImageColumn.ExposureTime, this.entityData.ExposureTime);
				this.entityData.ExposureTime = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaImageColumn.ExposureTime, this.entityData.ExposureTime);
				OnPropertyChanged("ExposureTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fnumber property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Fnumber
		{
			get
			{
				return this.entityData.Fnumber; 
			}
			
			set
			{
				if (this.entityData.Fnumber == value)
					return;
				
                OnPropertyChanging("Fnumber");                    
				OnColumnChanging(MediaImageColumn.Fnumber, this.entityData.Fnumber);
				this.entityData.Fnumber = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaImageColumn.Fnumber, this.entityData.Fnumber);
				OnPropertyChanged("Fnumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExposureProgram property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte? ExposureProgram
		{
			get
			{
				return this.entityData.ExposureProgram; 
			}
			
			set
			{
				if (this.entityData.ExposureProgram == value)
					return;
				
                OnPropertyChanging("ExposureProgram");                    
				OnColumnChanging(MediaImageColumn.ExposureProgram, this.entityData.ExposureProgram);
				this.entityData.ExposureProgram = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaImageColumn.ExposureProgram, this.entityData.ExposureProgram);
				OnPropertyChanged("ExposureProgram");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsoSpeedRatings property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? IsoSpeedRatings
		{
			get
			{
				return this.entityData.IsoSpeedRatings; 
			}
			
			set
			{
				if (this.entityData.IsoSpeedRatings == value)
					return;
				
                OnPropertyChanging("IsoSpeedRatings");                    
				OnColumnChanging(MediaImageColumn.IsoSpeedRatings, this.entityData.IsoSpeedRatings);
				this.entityData.IsoSpeedRatings = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaImageColumn.IsoSpeedRatings, this.entityData.IsoSpeedRatings);
				OnPropertyChanged("IsoSpeedRatings");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShutterSpeedValue property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? ShutterSpeedValue
		{
			get
			{
				return this.entityData.ShutterSpeedValue; 
			}
			
			set
			{
				if (this.entityData.ShutterSpeedValue == value)
					return;
				
                OnPropertyChanging("ShutterSpeedValue");                    
				OnColumnChanging(MediaImageColumn.ShutterSpeedValue, this.entityData.ShutterSpeedValue);
				this.entityData.ShutterSpeedValue = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaImageColumn.ShutterSpeedValue, this.entityData.ShutterSpeedValue);
				OnPropertyChanged("ShutterSpeedValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApertureValue property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? ApertureValue
		{
			get
			{
				return this.entityData.ApertureValue; 
			}
			
			set
			{
				if (this.entityData.ApertureValue == value)
					return;
				
                OnPropertyChanging("ApertureValue");                    
				OnColumnChanging(MediaImageColumn.ApertureValue, this.entityData.ApertureValue);
				this.entityData.ApertureValue = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaImageColumn.ApertureValue, this.entityData.ApertureValue);
				OnPropertyChanged("ApertureValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MeteringMode property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte? MeteringMode
		{
			get
			{
				return this.entityData.MeteringMode; 
			}
			
			set
			{
				if (this.entityData.MeteringMode == value)
					return;
				
                OnPropertyChanging("MeteringMode");                    
				OnColumnChanging(MediaImageColumn.MeteringMode, this.entityData.MeteringMode);
				this.entityData.MeteringMode = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaImageColumn.MeteringMode, this.entityData.MeteringMode);
				OnPropertyChanged("MeteringMode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Flash property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte? Flash
		{
			get
			{
				return this.entityData.Flash; 
			}
			
			set
			{
				if (this.entityData.Flash == value)
					return;
				
                OnPropertyChanging("Flash");                    
				OnColumnChanging(MediaImageColumn.Flash, this.entityData.Flash);
				this.entityData.Flash = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaImageColumn.Flash, this.entityData.Flash);
				OnPropertyChanged("Flash");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FocalLength property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? FocalLength
		{
			get
			{
				return this.entityData.FocalLength; 
			}
			
			set
			{
				if (this.entityData.FocalLength == value)
					return;
				
                OnPropertyChanging("FocalLength");                    
				OnColumnChanging(MediaImageColumn.FocalLength, this.entityData.FocalLength);
				this.entityData.FocalLength = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaImageColumn.FocalLength, this.entityData.FocalLength);
				OnPropertyChanged("FocalLength");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FlashpixVersion property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String FlashpixVersion
		{
			get
			{
				return this.entityData.FlashpixVersion; 
			}
			
			set
			{
				if (this.entityData.FlashpixVersion == value)
					return;
				
                OnPropertyChanging("FlashpixVersion");                    
				OnColumnChanging(MediaImageColumn.FlashpixVersion, this.entityData.FlashpixVersion);
				this.entityData.FlashpixVersion = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaImageColumn.FlashpixVersion, this.entityData.FlashpixVersion);
				OnPropertyChanged("FlashpixVersion");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ColorSpace property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte? ColorSpace
		{
			get
			{
				return this.entityData.ColorSpace; 
			}
			
			set
			{
				if (this.entityData.ColorSpace == value)
					return;
				
                OnPropertyChanging("ColorSpace");                    
				OnColumnChanging(MediaImageColumn.ColorSpace, this.entityData.ColorSpace);
				this.entityData.ColorSpace = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaImageColumn.ColorSpace, this.entityData.ColorSpace);
				OnPropertyChanged("ColorSpace");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SensingMethod property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte? SensingMethod
		{
			get
			{
				return this.entityData.SensingMethod; 
			}
			
			set
			{
				if (this.entityData.SensingMethod == value)
					return;
				
                OnPropertyChanging("SensingMethod");                    
				OnColumnChanging(MediaImageColumn.SensingMethod, this.entityData.SensingMethod);
				this.entityData.SensingMethod = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaImageColumn.SensingMethod, this.entityData.SensingMethod);
				OnPropertyChanged("SensingMethod");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExposureMode property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte? ExposureMode
		{
			get
			{
				return this.entityData.ExposureMode; 
			}
			
			set
			{
				if (this.entityData.ExposureMode == value)
					return;
				
                OnPropertyChanging("ExposureMode");                    
				OnColumnChanging(MediaImageColumn.ExposureMode, this.entityData.ExposureMode);
				this.entityData.ExposureMode = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaImageColumn.ExposureMode, this.entityData.ExposureMode);
				OnPropertyChanged("ExposureMode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WhiteBalance property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte? WhiteBalance
		{
			get
			{
				return this.entityData.WhiteBalance; 
			}
			
			set
			{
				if (this.entityData.WhiteBalance == value)
					return;
				
                OnPropertyChanging("WhiteBalance");                    
				OnColumnChanging(MediaImageColumn.WhiteBalance, this.entityData.WhiteBalance);
				this.entityData.WhiteBalance = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaImageColumn.WhiteBalance, this.entityData.WhiteBalance);
				OnPropertyChanged("WhiteBalance");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SceneCaptureType property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte? SceneCaptureType
		{
			get
			{
				return this.entityData.SceneCaptureType; 
			}
			
			set
			{
				if (this.entityData.SceneCaptureType == value)
					return;
				
                OnPropertyChanging("SceneCaptureType");                    
				OnColumnChanging(MediaImageColumn.SceneCaptureType, this.entityData.SceneCaptureType);
				this.entityData.SceneCaptureType = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaImageColumn.SceneCaptureType, this.entityData.SceneCaptureType);
				OnPropertyChanged("SceneCaptureType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Sharpness property. 
		///		
		/// </summary>
		/// <value>This type is tinyint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte? Sharpness
		{
			get
			{
				return this.entityData.Sharpness; 
			}
			
			set
			{
				if (this.entityData.Sharpness == value)
					return;
				
                OnPropertyChanging("Sharpness");                    
				OnColumnChanging(MediaImageColumn.Sharpness, this.entityData.Sharpness);
				this.entityData.Sharpness = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaImageColumn.Sharpness, this.entityData.Sharpness);
				OnPropertyChanged("Sharpness");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "Id is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public override System.Guid Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(MediaImageColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if ( !this._deserializing && this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MediaImageColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the Id property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the Id property.</remarks>
		/// <value>This type is uniqueidentifier</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Guid OriginalId
		{
			get { return this.entityData.OriginalId; }
			set { this.entityData.OriginalId = value; }
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Media"/>.
		/// </summary>
		/// <value>The source Media for Id.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Media IdSource
      	{
            get { return entityData.IdSource; }
            set { entityData.IdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Media_Image"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Orientation", "YCbCrPositioning", "ExposureTime", "FNumber", "ExposureProgram", "ISOSpeedRatings", "ShutterSpeedValue", "ApertureValue", "MeteringMode", "Flash", "FocalLength", "FlashpixVersion", "ColorSpace", "SensingMethod", "ExposureMode", "WhiteBalance", "SceneCaptureType", "Sharpness", "Id"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MediaImageEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (MediaImage) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<MediaImage>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as MediaImage);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed MediaImage Entity 
		///</summary>
		protected virtual MediaImage Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			MediaImage copy = new MediaImage();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Orientation = this.Orientation;
				copy.YcbCrPositioning = this.YcbCrPositioning;
				copy.ExposureTime = this.ExposureTime;
				copy.Fnumber = this.Fnumber;
				copy.ExposureProgram = this.ExposureProgram;
				copy.IsoSpeedRatings = this.IsoSpeedRatings;
				copy.ShutterSpeedValue = this.ShutterSpeedValue;
				copy.ApertureValue = this.ApertureValue;
				copy.MeteringMode = this.MeteringMode;
				copy.Flash = this.Flash;
				copy.FocalLength = this.FocalLength;
				copy.FlashpixVersion = this.FlashpixVersion;
				copy.ColorSpace = this.ColorSpace;
				copy.SensingMethod = this.SensingMethod;
				copy.ExposureMode = this.ExposureMode;
				copy.WhiteBalance = this.WhiteBalance;
				copy.SceneCaptureType = this.SceneCaptureType;
				copy.Sharpness = this.Sharpness;
				copy.Id = this.Id;
					copy.OriginalId = this.OriginalId;
			
			if (this.IdSource != null && existingCopies.Contains(this.IdSource))
				copy.IdSource = existingCopies[this.IdSource] as Media;
			else
				copy.IdSource = MakeCopyOf(this.IdSource, existingCopies) as Media;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed MediaImage Entity 
		///</summary>
		public virtual MediaImage Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed MediaImage Entity which is a deep copy of the current entity.
		///</summary>
		public virtual MediaImage DeepCopy()
		{
			return EntityHelper.Clone<MediaImage>(this as MediaImage);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MediaImageEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MediaImageEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MediaImageEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MediaImageColumn column)
		{
			switch(column)
			{
					case MediaImageColumn.Orientation:
					return entityData.Orientation != _originalData.Orientation;
					case MediaImageColumn.YcbCrPositioning:
					return entityData.YcbCrPositioning != _originalData.YcbCrPositioning;
					case MediaImageColumn.ExposureTime:
					return entityData.ExposureTime != _originalData.ExposureTime;
					case MediaImageColumn.Fnumber:
					return entityData.Fnumber != _originalData.Fnumber;
					case MediaImageColumn.ExposureProgram:
					return entityData.ExposureProgram != _originalData.ExposureProgram;
					case MediaImageColumn.IsoSpeedRatings:
					return entityData.IsoSpeedRatings != _originalData.IsoSpeedRatings;
					case MediaImageColumn.ShutterSpeedValue:
					return entityData.ShutterSpeedValue != _originalData.ShutterSpeedValue;
					case MediaImageColumn.ApertureValue:
					return entityData.ApertureValue != _originalData.ApertureValue;
					case MediaImageColumn.MeteringMode:
					return entityData.MeteringMode != _originalData.MeteringMode;
					case MediaImageColumn.Flash:
					return entityData.Flash != _originalData.Flash;
					case MediaImageColumn.FocalLength:
					return entityData.FocalLength != _originalData.FocalLength;
					case MediaImageColumn.FlashpixVersion:
					return entityData.FlashpixVersion != _originalData.FlashpixVersion;
					case MediaImageColumn.ColorSpace:
					return entityData.ColorSpace != _originalData.ColorSpace;
					case MediaImageColumn.SensingMethod:
					return entityData.SensingMethod != _originalData.SensingMethod;
					case MediaImageColumn.ExposureMode:
					return entityData.ExposureMode != _originalData.ExposureMode;
					case MediaImageColumn.WhiteBalance:
					return entityData.WhiteBalance != _originalData.WhiteBalance;
					case MediaImageColumn.SceneCaptureType:
					return entityData.SceneCaptureType != _originalData.SceneCaptureType;
					case MediaImageColumn.Sharpness:
					return entityData.Sharpness != _originalData.Sharpness;
					case MediaImageColumn.Id:
					return entityData.Id != _originalData.Id;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MediaImageColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Orientation != _originalData.Orientation;
			result = result || entityData.YcbCrPositioning != _originalData.YcbCrPositioning;
			result = result || entityData.ExposureTime != _originalData.ExposureTime;
			result = result || entityData.Fnumber != _originalData.Fnumber;
			result = result || entityData.ExposureProgram != _originalData.ExposureProgram;
			result = result || entityData.IsoSpeedRatings != _originalData.IsoSpeedRatings;
			result = result || entityData.ShutterSpeedValue != _originalData.ShutterSpeedValue;
			result = result || entityData.ApertureValue != _originalData.ApertureValue;
			result = result || entityData.MeteringMode != _originalData.MeteringMode;
			result = result || entityData.Flash != _originalData.Flash;
			result = result || entityData.FocalLength != _originalData.FocalLength;
			result = result || entityData.FlashpixVersion != _originalData.FlashpixVersion;
			result = result || entityData.ColorSpace != _originalData.ColorSpace;
			result = result || entityData.SensingMethod != _originalData.SensingMethod;
			result = result || entityData.ExposureMode != _originalData.ExposureMode;
			result = result || entityData.WhiteBalance != _originalData.WhiteBalance;
			result = result || entityData.SceneCaptureType != _originalData.SceneCaptureType;
			result = result || entityData.Sharpness != _originalData.Sharpness;
			result = result || entityData.Id != _originalData.Id;
			return result;
		}	
		
		///<summary>
		///  Returns a MediaImage Entity with the original data.
		///</summary>
		public MediaImage GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMediaImage(
				_originalData.Orientation,
				_originalData.YcbCrPositioning,
				_originalData.ExposureTime,
				_originalData.Fnumber,
				_originalData.ExposureProgram,
				_originalData.IsoSpeedRatings,
				_originalData.ShutterSpeedValue,
				_originalData.ApertureValue,
				_originalData.MeteringMode,
				_originalData.Flash,
				_originalData.FocalLength,
				_originalData.FlashpixVersion,
				_originalData.ColorSpace,
				_originalData.SensingMethod,
				_originalData.ExposureMode,
				_originalData.WhiteBalance,
				_originalData.SceneCaptureType,
				_originalData.Sharpness,
				_originalData.Id
				);
				
			return (MediaImage)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MediaImageBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MediaImageBase)
				return ValueEquals(this, (MediaImageBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MediaImageBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return ((this.Orientation == null) ? string.Empty : this.Orientation.ToString()).GetHashCode() ^ 
					((this.YcbCrPositioning == null) ? string.Empty : this.YcbCrPositioning.ToString()).GetHashCode() ^ 
					((this.ExposureTime == null) ? string.Empty : this.ExposureTime.ToString()).GetHashCode() ^ 
					((this.Fnumber == null) ? string.Empty : this.Fnumber.ToString()).GetHashCode() ^ 
					((this.ExposureProgram == null) ? string.Empty : this.ExposureProgram.ToString()).GetHashCode() ^ 
					((this.IsoSpeedRatings == null) ? string.Empty : this.IsoSpeedRatings.ToString()).GetHashCode() ^ 
					((this.ShutterSpeedValue == null) ? string.Empty : this.ShutterSpeedValue.ToString()).GetHashCode() ^ 
					((this.ApertureValue == null) ? string.Empty : this.ApertureValue.ToString()).GetHashCode() ^ 
					((this.MeteringMode == null) ? string.Empty : this.MeteringMode.ToString()).GetHashCode() ^ 
					((this.Flash == null) ? string.Empty : this.Flash.ToString()).GetHashCode() ^ 
					((this.FocalLength == null) ? string.Empty : this.FocalLength.ToString()).GetHashCode() ^ 
					((this.FlashpixVersion == null) ? string.Empty : this.FlashpixVersion.ToString()).GetHashCode() ^ 
					((this.ColorSpace == null) ? string.Empty : this.ColorSpace.ToString()).GetHashCode() ^ 
					((this.SensingMethod == null) ? string.Empty : this.SensingMethod.ToString()).GetHashCode() ^ 
					((this.ExposureMode == null) ? string.Empty : this.ExposureMode.ToString()).GetHashCode() ^ 
					((this.WhiteBalance == null) ? string.Empty : this.WhiteBalance.ToString()).GetHashCode() ^ 
					((this.SceneCaptureType == null) ? string.Empty : this.SceneCaptureType.ToString()).GetHashCode() ^ 
					((this.Sharpness == null) ? string.Empty : this.Sharpness.ToString()).GetHashCode() ^ 
					this.Id.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MediaImageBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MediaImageBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MediaImageBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MediaImageBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MediaImageBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MediaImageBase Object1, MediaImageBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if ( Object1.Orientation != null && Object2.Orientation != null )
			{
				if (Object1.Orientation != Object2.Orientation)
					equal = false;
			}
			else if (Object1.Orientation == null ^ Object2.Orientation == null )
			{
				equal = false;
			}
			if ( Object1.YcbCrPositioning != null && Object2.YcbCrPositioning != null )
			{
				if (Object1.YcbCrPositioning != Object2.YcbCrPositioning)
					equal = false;
			}
			else if (Object1.YcbCrPositioning == null ^ Object2.YcbCrPositioning == null )
			{
				equal = false;
			}
			if ( Object1.ExposureTime != null && Object2.ExposureTime != null )
			{
				if (Object1.ExposureTime != Object2.ExposureTime)
					equal = false;
			}
			else if (Object1.ExposureTime == null ^ Object2.ExposureTime == null )
			{
				equal = false;
			}
			if ( Object1.Fnumber != null && Object2.Fnumber != null )
			{
				if (Object1.Fnumber != Object2.Fnumber)
					equal = false;
			}
			else if (Object1.Fnumber == null ^ Object2.Fnumber == null )
			{
				equal = false;
			}
			if ( Object1.ExposureProgram != null && Object2.ExposureProgram != null )
			{
				if (Object1.ExposureProgram != Object2.ExposureProgram)
					equal = false;
			}
			else if (Object1.ExposureProgram == null ^ Object2.ExposureProgram == null )
			{
				equal = false;
			}
			if ( Object1.IsoSpeedRatings != null && Object2.IsoSpeedRatings != null )
			{
				if (Object1.IsoSpeedRatings != Object2.IsoSpeedRatings)
					equal = false;
			}
			else if (Object1.IsoSpeedRatings == null ^ Object2.IsoSpeedRatings == null )
			{
				equal = false;
			}
			if ( Object1.ShutterSpeedValue != null && Object2.ShutterSpeedValue != null )
			{
				if (Object1.ShutterSpeedValue != Object2.ShutterSpeedValue)
					equal = false;
			}
			else if (Object1.ShutterSpeedValue == null ^ Object2.ShutterSpeedValue == null )
			{
				equal = false;
			}
			if ( Object1.ApertureValue != null && Object2.ApertureValue != null )
			{
				if (Object1.ApertureValue != Object2.ApertureValue)
					equal = false;
			}
			else if (Object1.ApertureValue == null ^ Object2.ApertureValue == null )
			{
				equal = false;
			}
			if ( Object1.MeteringMode != null && Object2.MeteringMode != null )
			{
				if (Object1.MeteringMode != Object2.MeteringMode)
					equal = false;
			}
			else if (Object1.MeteringMode == null ^ Object2.MeteringMode == null )
			{
				equal = false;
			}
			if ( Object1.Flash != null && Object2.Flash != null )
			{
				if (Object1.Flash != Object2.Flash)
					equal = false;
			}
			else if (Object1.Flash == null ^ Object2.Flash == null )
			{
				equal = false;
			}
			if ( Object1.FocalLength != null && Object2.FocalLength != null )
			{
				if (Object1.FocalLength != Object2.FocalLength)
					equal = false;
			}
			else if (Object1.FocalLength == null ^ Object2.FocalLength == null )
			{
				equal = false;
			}
			if ( Object1.FlashpixVersion != null && Object2.FlashpixVersion != null )
			{
				if (Object1.FlashpixVersion != Object2.FlashpixVersion)
					equal = false;
			}
			else if (Object1.FlashpixVersion == null ^ Object2.FlashpixVersion == null )
			{
				equal = false;
			}
			if ( Object1.ColorSpace != null && Object2.ColorSpace != null )
			{
				if (Object1.ColorSpace != Object2.ColorSpace)
					equal = false;
			}
			else if (Object1.ColorSpace == null ^ Object2.ColorSpace == null )
			{
				equal = false;
			}
			if ( Object1.SensingMethod != null && Object2.SensingMethod != null )
			{
				if (Object1.SensingMethod != Object2.SensingMethod)
					equal = false;
			}
			else if (Object1.SensingMethod == null ^ Object2.SensingMethod == null )
			{
				equal = false;
			}
			if ( Object1.ExposureMode != null && Object2.ExposureMode != null )
			{
				if (Object1.ExposureMode != Object2.ExposureMode)
					equal = false;
			}
			else if (Object1.ExposureMode == null ^ Object2.ExposureMode == null )
			{
				equal = false;
			}
			if ( Object1.WhiteBalance != null && Object2.WhiteBalance != null )
			{
				if (Object1.WhiteBalance != Object2.WhiteBalance)
					equal = false;
			}
			else if (Object1.WhiteBalance == null ^ Object2.WhiteBalance == null )
			{
				equal = false;
			}
			if ( Object1.SceneCaptureType != null && Object2.SceneCaptureType != null )
			{
				if (Object1.SceneCaptureType != Object2.SceneCaptureType)
					equal = false;
			}
			else if (Object1.SceneCaptureType == null ^ Object2.SceneCaptureType == null )
			{
				equal = false;
			}
			if ( Object1.Sharpness != null && Object2.Sharpness != null )
			{
				if (Object1.Sharpness != Object2.Sharpness)
					equal = false;
			}
			else if (Object1.Sharpness == null ^ Object2.Sharpness == null )
			{
				equal = false;
			}
			if (Object1.Id != Object2.Id)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MediaImageBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MediaImageComparer GetComparer()
        {
            return new MediaImageComparer();
        }
        */

        // Comparer delegates back to MediaImage
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(MediaImage rhs, MediaImageColumn which)
        {
            switch (which)
            {
            	
            	
            	case MediaImageColumn.Orientation:
            		return this.Orientation.Value.CompareTo(rhs.Orientation.Value);
            		
            		                 
            	
            	
            	case MediaImageColumn.YcbCrPositioning:
            		return this.YcbCrPositioning.Value.CompareTo(rhs.YcbCrPositioning.Value);
            		
            		                 
            	
            	
            	case MediaImageColumn.ExposureTime:
            		return this.ExposureTime.Value.CompareTo(rhs.ExposureTime.Value);
            		
            		                 
            	
            	
            	case MediaImageColumn.Fnumber:
            		return this.Fnumber.Value.CompareTo(rhs.Fnumber.Value);
            		
            		                 
            	
            	
            	case MediaImageColumn.ExposureProgram:
            		return this.ExposureProgram.Value.CompareTo(rhs.ExposureProgram.Value);
            		
            		                 
            	
            	
            	case MediaImageColumn.IsoSpeedRatings:
            		return this.IsoSpeedRatings.Value.CompareTo(rhs.IsoSpeedRatings.Value);
            		
            		                 
            	
            	
            	case MediaImageColumn.ShutterSpeedValue:
            		return this.ShutterSpeedValue.Value.CompareTo(rhs.ShutterSpeedValue.Value);
            		
            		                 
            	
            	
            	case MediaImageColumn.ApertureValue:
            		return this.ApertureValue.Value.CompareTo(rhs.ApertureValue.Value);
            		
            		                 
            	
            	
            	case MediaImageColumn.MeteringMode:
            		return this.MeteringMode.Value.CompareTo(rhs.MeteringMode.Value);
            		
            		                 
            	
            	
            	case MediaImageColumn.Flash:
            		return this.Flash.Value.CompareTo(rhs.Flash.Value);
            		
            		                 
            	
            	
            	case MediaImageColumn.FocalLength:
            		return this.FocalLength.Value.CompareTo(rhs.FocalLength.Value);
            		
            		                 
            	
            	
            	case MediaImageColumn.FlashpixVersion:
            		return this.FlashpixVersion.CompareTo(rhs.FlashpixVersion);
            		
            		                 
            	
            	
            	case MediaImageColumn.ColorSpace:
            		return this.ColorSpace.Value.CompareTo(rhs.ColorSpace.Value);
            		
            		                 
            	
            	
            	case MediaImageColumn.SensingMethod:
            		return this.SensingMethod.Value.CompareTo(rhs.SensingMethod.Value);
            		
            		                 
            	
            	
            	case MediaImageColumn.ExposureMode:
            		return this.ExposureMode.Value.CompareTo(rhs.ExposureMode.Value);
            		
            		                 
            	
            	
            	case MediaImageColumn.WhiteBalance:
            		return this.WhiteBalance.Value.CompareTo(rhs.WhiteBalance.Value);
            		
            		                 
            	
            	
            	case MediaImageColumn.SceneCaptureType:
            		return this.SceneCaptureType.Value.CompareTo(rhs.SceneCaptureType.Value);
            		
            		                 
            	
            	
            	case MediaImageColumn.Sharpness:
            		return this.Sharpness.Value.CompareTo(rhs.Sharpness.Value);
            		
            		                 
            	
            	
            	case MediaImageColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MediaImageKey> Members
		
		// member variable for the EntityId property
		private MediaImageKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MediaImageKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MediaImageKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("MediaImage")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- Orientation: {0}{19}- YcbCrPositioning: {1}{19}- ExposureTime: {2}{19}- Fnumber: {3}{19}- ExposureProgram: {4}{19}- IsoSpeedRatings: {5}{19}- ShutterSpeedValue: {6}{19}- ApertureValue: {7}{19}- MeteringMode: {8}{19}- Flash: {9}{19}- FocalLength: {10}{19}- FlashpixVersion: {11}{19}- ColorSpace: {12}{19}- SensingMethod: {13}{19}- ExposureMode: {14}{19}- WhiteBalance: {15}{19}- SceneCaptureType: {16}{19}- Sharpness: {17}{19}- Id: {18}{19}{21}", 
				(this.Orientation == null) ? string.Empty : this.Orientation.ToString(),
				(this.YcbCrPositioning == null) ? string.Empty : this.YcbCrPositioning.ToString(),
				(this.ExposureTime == null) ? string.Empty : this.ExposureTime.ToString(),
				(this.Fnumber == null) ? string.Empty : this.Fnumber.ToString(),
				(this.ExposureProgram == null) ? string.Empty : this.ExposureProgram.ToString(),
				(this.IsoSpeedRatings == null) ? string.Empty : this.IsoSpeedRatings.ToString(),
				(this.ShutterSpeedValue == null) ? string.Empty : this.ShutterSpeedValue.ToString(),
				(this.ApertureValue == null) ? string.Empty : this.ApertureValue.ToString(),
				(this.MeteringMode == null) ? string.Empty : this.MeteringMode.ToString(),
				(this.Flash == null) ? string.Empty : this.Flash.ToString(),
				(this.FocalLength == null) ? string.Empty : this.FocalLength.ToString(),
				(this.FlashpixVersion == null) ? string.Empty : this.FlashpixVersion.ToString(),
				(this.ColorSpace == null) ? string.Empty : this.ColorSpace.ToString(),
				(this.SensingMethod == null) ? string.Empty : this.SensingMethod.ToString(),
				(this.ExposureMode == null) ? string.Empty : this.ExposureMode.ToString(),
				(this.WhiteBalance == null) ? string.Empty : this.WhiteBalance.ToString(),
				(this.SceneCaptureType == null) ? string.Empty : this.SceneCaptureType.ToString(),
				(this.Sharpness == null) ? string.Empty : this.Sharpness.ToString(),
				this.Id,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Media_Image' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[DataContract]
	internal protected class MediaImageEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Media_Image"</remarks>
		[DataMember]
		public System.Guid Id;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		[DataMember]
		public System.Guid OriginalId;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// Orientation : 
		/// </summary>
		[DataMember]
		public System.Byte? Orientation = null;
		
		/// <summary>
		/// YCbCrPositioning : 
		/// </summary>
		[DataMember]
		public System.Byte? YcbCrPositioning = null;
		
		/// <summary>
		/// ExposureTime : 
		/// </summary>
		[DataMember]
		public System.Double? ExposureTime = null;
		
		/// <summary>
		/// FNumber : 
		/// </summary>
		[DataMember]
		public System.Double? Fnumber = null;
		
		/// <summary>
		/// ExposureProgram : 
		/// </summary>
		[DataMember]
		public System.Byte? ExposureProgram = null;
		
		/// <summary>
		/// ISOSpeedRatings : 
		/// </summary>
		[DataMember]
		public System.Int16? IsoSpeedRatings = null;
		
		/// <summary>
		/// ShutterSpeedValue : 
		/// </summary>
		[DataMember]
		public System.Double? ShutterSpeedValue = null;
		
		/// <summary>
		/// ApertureValue : 
		/// </summary>
		[DataMember]
		public System.Double? ApertureValue = null;
		
		/// <summary>
		/// MeteringMode : 
		/// </summary>
		[DataMember]
		public System.Byte? MeteringMode = null;
		
		/// <summary>
		/// Flash : 
		/// </summary>
		[DataMember]
		public System.Byte? Flash = null;
		
		/// <summary>
		/// FocalLength : 
		/// </summary>
		[DataMember]
		public System.Double? FocalLength = null;
		
		/// <summary>
		/// FlashpixVersion : 
		/// </summary>
		[DataMember]
		public System.String FlashpixVersion = null;
		
		/// <summary>
		/// ColorSpace : 
		/// </summary>
		[DataMember]
		public System.Byte? ColorSpace = null;
		
		/// <summary>
		/// SensingMethod : 
		/// </summary>
		[DataMember]
		public System.Byte? SensingMethod = null;
		
		/// <summary>
		/// ExposureMode : 
		/// </summary>
		[DataMember]
		public System.Byte? ExposureMode = null;
		
		/// <summary>
		/// WhiteBalance : 
		/// </summary>
		[DataMember]
		public System.Byte? WhiteBalance = null;
		
		/// <summary>
		/// SceneCaptureType : 
		/// </summary>
		[DataMember]
		public System.Byte? SceneCaptureType = null;
		
		/// <summary>
		/// Sharpness : 
		/// </summary>
		[DataMember]
		public System.Byte? Sharpness = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Media _idSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Media"/>.
		/// </summary>
		/// <value>The source Media for Id.</value>
		[DataMember]
		[Browsable(false)]
		public virtual Media IdSource
      	{
            get { return this._idSource; }
            set { this._idSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MediaImageEntityData _tmp = new MediaImageEntityData();
						
			_tmp.Id = this.Id;
			_tmp.OriginalId = this.OriginalId;
			
			_tmp.Orientation = this.Orientation;
			_tmp.YcbCrPositioning = this.YcbCrPositioning;
			_tmp.ExposureTime = this.ExposureTime;
			_tmp.Fnumber = this.Fnumber;
			_tmp.ExposureProgram = this.ExposureProgram;
			_tmp.IsoSpeedRatings = this.IsoSpeedRatings;
			_tmp.ShutterSpeedValue = this.ShutterSpeedValue;
			_tmp.ApertureValue = this.ApertureValue;
			_tmp.MeteringMode = this.MeteringMode;
			_tmp.Flash = this.Flash;
			_tmp.FocalLength = this.FocalLength;
			_tmp.FlashpixVersion = this.FlashpixVersion;
			_tmp.ColorSpace = this.ColorSpace;
			_tmp.SensingMethod = this.SensingMethod;
			_tmp.ExposureMode = this.ExposureMode;
			_tmp.WhiteBalance = this.WhiteBalance;
			_tmp.SceneCaptureType = this.SceneCaptureType;
			_tmp.Sharpness = this.Sharpness;
			
			#region Source Parent Composite Entities
			if (this.IdSource != null)
				_tmp.IdSource = MakeCopyOf(this.IdSource) as Media;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MediaImageEntityData _tmp = new MediaImageEntityData();
						
			_tmp.Id = this.Id;
			_tmp.OriginalId = this.OriginalId;
			
			_tmp.Orientation = this.Orientation;
			_tmp.YcbCrPositioning = this.YcbCrPositioning;
			_tmp.ExposureTime = this.ExposureTime;
			_tmp.Fnumber = this.Fnumber;
			_tmp.ExposureProgram = this.ExposureProgram;
			_tmp.IsoSpeedRatings = this.IsoSpeedRatings;
			_tmp.ShutterSpeedValue = this.ShutterSpeedValue;
			_tmp.ApertureValue = this.ApertureValue;
			_tmp.MeteringMode = this.MeteringMode;
			_tmp.Flash = this.Flash;
			_tmp.FocalLength = this.FocalLength;
			_tmp.FlashpixVersion = this.FlashpixVersion;
			_tmp.ColorSpace = this.ColorSpace;
			_tmp.SensingMethod = this.SensingMethod;
			_tmp.ExposureMode = this.ExposureMode;
			_tmp.WhiteBalance = this.WhiteBalance;
			_tmp.SceneCaptureType = this.SceneCaptureType;
			_tmp.Sharpness = this.Sharpness;
			
			#region Source Parent Composite Entities
			if (this.IdSource != null && existingCopies.Contains(this.IdSource))
				_tmp.IdSource = existingCopies[this.IdSource] as Media;
			else
				_tmp.IdSource = MakeCopyOf(this.IdSource, existingCopies) as Media;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region DataContract serialization
		
		bool _deserializing = false;
		
		/// <summary>
		/// Called before deserializing the type.
		/// </summary>
		[OnDeserializingAttribute]
		private void Initialize_BeforeDeserializing(StreamingContext context)
		{
			this._deserializing = true;
		
			this.entityData = new MediaImageEntityData();
			this.backupData = null;
			
			AddValidationRules();
		}
		
		/// <summary>
		/// Called after deserializing the type.
		/// </summary>
		[OnDeserializedAttribute ]
		private void Initialize_Deserialized(StreamingContext context)
		{
			this._deserializing = false;
		}
				
		#endregion
		
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MediaImageColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MediaImageColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MediaImageColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MediaImageColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MediaImageColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MediaImageColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				MediaImageEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MediaImageEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MediaImageColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MediaImageColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MediaImageEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MediaImageEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MediaImageEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="MediaImage"/> object.
	/// </remarks>
	public class MediaImageEventArgs : System.EventArgs
	{
		private MediaImageColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MediaImageEventArgs class.
		///</summary>
		public MediaImageEventArgs(MediaImageColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MediaImageEventArgs class.
		///</summary>
		public MediaImageEventArgs(MediaImageColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MediaImageColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MediaImageColumn" />
		public MediaImageColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all MediaImage related events.
	///</summary>
	public delegate void MediaImageEventHandler(object sender, MediaImageEventArgs e);
	
	#region MediaImageComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MediaImageComparer : System.Collections.Generic.IComparer<MediaImage>
	{
		MediaImageColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MediaImageComparer"/> class.
        /// </summary>
		public MediaImageComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MediaImageComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MediaImageComparer(MediaImageColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="MediaImage"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="MediaImage"/> to compare.</param>
        /// <param name="b">The second <c>MediaImage</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(MediaImage a, MediaImage b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(MediaImage entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(MediaImage a, MediaImage b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MediaImageColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MediaImageKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="MediaImage"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MediaImageKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MediaImageKey class.
		/// </summary>
		public MediaImageKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MediaImageKey class.
		/// </summary>
		public MediaImageKey(MediaImageBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MediaImageKey class.
		/// </summary>
		public MediaImageKey(System.Guid _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MediaImageBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MediaImageBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Guid _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Guid Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Guid) EntityUtil.ChangeType(values["Id"], typeof(System.Guid)) : Guid.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MediaImageColumn Enum
	
	/// <summary>
	/// Enumerate the MediaImage columns.
	/// </summary>
	[Serializable]
	public enum MediaImageColumn : int
	{
		/// <summary>
		/// Orientation : 
		/// </summary>
		[EnumTextValue("Orientation")]
		[ColumnEnum("Orientation", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		Orientation = 1,
		/// <summary>
		/// YcbCrPositioning : 
		/// </summary>
		[EnumTextValue("Ycb Cr Positioning")]
		[ColumnEnum("YCbCrPositioning", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		YcbCrPositioning = 2,
		/// <summary>
		/// ExposureTime : 
		/// </summary>
		[EnumTextValue("Exposure Time")]
		[ColumnEnum("ExposureTime", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		ExposureTime = 3,
		/// <summary>
		/// Fnumber : 
		/// </summary>
		[EnumTextValue("Fnumber")]
		[ColumnEnum("FNumber", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Fnumber = 4,
		/// <summary>
		/// ExposureProgram : 
		/// </summary>
		[EnumTextValue("Exposure Program")]
		[ColumnEnum("ExposureProgram", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		ExposureProgram = 5,
		/// <summary>
		/// IsoSpeedRatings : 
		/// </summary>
		[EnumTextValue("Iso Speed Ratings")]
		[ColumnEnum("ISOSpeedRatings", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		IsoSpeedRatings = 6,
		/// <summary>
		/// ShutterSpeedValue : 
		/// </summary>
		[EnumTextValue("Shutter Speed Value")]
		[ColumnEnum("ShutterSpeedValue", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		ShutterSpeedValue = 7,
		/// <summary>
		/// ApertureValue : 
		/// </summary>
		[EnumTextValue("Aperture Value")]
		[ColumnEnum("ApertureValue", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		ApertureValue = 8,
		/// <summary>
		/// MeteringMode : 
		/// </summary>
		[EnumTextValue("Metering Mode")]
		[ColumnEnum("MeteringMode", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		MeteringMode = 9,
		/// <summary>
		/// Flash : 
		/// </summary>
		[EnumTextValue("Flash")]
		[ColumnEnum("Flash", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		Flash = 10,
		/// <summary>
		/// FocalLength : 
		/// </summary>
		[EnumTextValue("Focal Length")]
		[ColumnEnum("FocalLength", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		FocalLength = 11,
		/// <summary>
		/// FlashpixVersion : 
		/// </summary>
		[EnumTextValue("Flashpix Version")]
		[ColumnEnum("FlashpixVersion", typeof(System.String), System.Data.DbType.String, false, false, true)]
		FlashpixVersion = 12,
		/// <summary>
		/// ColorSpace : 
		/// </summary>
		[EnumTextValue("Color Space")]
		[ColumnEnum("ColorSpace", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		ColorSpace = 13,
		/// <summary>
		/// SensingMethod : 
		/// </summary>
		[EnumTextValue("Sensing Method")]
		[ColumnEnum("SensingMethod", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		SensingMethod = 14,
		/// <summary>
		/// ExposureMode : 
		/// </summary>
		[EnumTextValue("Exposure Mode")]
		[ColumnEnum("ExposureMode", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		ExposureMode = 15,
		/// <summary>
		/// WhiteBalance : 
		/// </summary>
		[EnumTextValue("White Balance")]
		[ColumnEnum("WhiteBalance", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		WhiteBalance = 16,
		/// <summary>
		/// SceneCaptureType : 
		/// </summary>
		[EnumTextValue("Scene Capture Type")]
		[ColumnEnum("SceneCaptureType", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		SceneCaptureType = 17,
		/// <summary>
		/// Sharpness : 
		/// </summary>
		[EnumTextValue("Sharpness")]
		[ColumnEnum("Sharpness", typeof(System.Byte), System.Data.DbType.Byte, false, false, true)]
		Sharpness = 18,
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Guid), System.Data.DbType.Guid, true, false, false)]
		Id = 19
	}//End enum

	#endregion MediaImageColumn Enum

} // end namespace
