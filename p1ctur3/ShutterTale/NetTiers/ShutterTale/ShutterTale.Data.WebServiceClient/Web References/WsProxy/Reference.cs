//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18051.
// 
#pragma warning disable 1591

namespace ShutterTale.Data.WebServiceClient.WsProxy {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ShutterTaleServicesSoap", Namespace="http://localhost/ShutterTale.NetTiers/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeSpan))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityBaseCore))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Media[]))]
    public partial class ShutterTaleServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback MediaProvider_DeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaProvider_FindOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaProvider_GetAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaProvider_GetPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaProvider_GetByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaProvider_InsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaProvider_BulkInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaProvider_UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaImageProvider_DeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaImageProvider_FindOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaImageProvider_GetAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaImageProvider_GetPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaImageProvider_GetByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaImageProvider_InsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaImageProvider_BulkInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaImageProvider_UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaVideoProvider_DeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaVideoProvider_FindOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaVideoProvider_GetAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaVideoProvider_GetPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaVideoProvider_GetByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaVideoProvider_InsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaVideoProvider_BulkInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaVideoProvider_UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaAudioProvider_DeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaAudioProvider_FindOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaAudioProvider_GetAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaAudioProvider_GetPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaAudioProvider_GetByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaAudioProvider_InsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaAudioProvider_BulkInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback MediaAudioProvider_UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback PreviewsProvider_DeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback PreviewsProvider_FindOperationCompleted;
        
        private System.Threading.SendOrPostCallback PreviewsProvider_GetAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback PreviewsProvider_GetPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback PreviewsProvider_GetByMediumIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback PreviewsProvider_GetByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback PreviewsProvider_InsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback PreviewsProvider_BulkInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback PreviewsProvider_UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteNonQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteNonQuery1OperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteDataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteDataSet1OperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteScalarOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteScalar1OperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ShutterTaleServices() {
            this.Url = "http://localhost/ShutterTale.NetTiers/ShutterTaleServices.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event MediaProvider_DeleteCompletedEventHandler MediaProvider_DeleteCompleted;
        
        /// <remarks/>
        public event MediaProvider_FindCompletedEventHandler MediaProvider_FindCompleted;
        
        /// <remarks/>
        public event MediaProvider_GetAllCompletedEventHandler MediaProvider_GetAllCompleted;
        
        /// <remarks/>
        public event MediaProvider_GetPagedCompletedEventHandler MediaProvider_GetPagedCompleted;
        
        /// <remarks/>
        public event MediaProvider_GetByIdCompletedEventHandler MediaProvider_GetByIdCompleted;
        
        /// <remarks/>
        public event MediaProvider_InsertCompletedEventHandler MediaProvider_InsertCompleted;
        
        /// <remarks/>
        public event MediaProvider_BulkInsertCompletedEventHandler MediaProvider_BulkInsertCompleted;
        
        /// <remarks/>
        public event MediaProvider_UpdateCompletedEventHandler MediaProvider_UpdateCompleted;
        
        /// <remarks/>
        public event MediaImageProvider_DeleteCompletedEventHandler MediaImageProvider_DeleteCompleted;
        
        /// <remarks/>
        public event MediaImageProvider_FindCompletedEventHandler MediaImageProvider_FindCompleted;
        
        /// <remarks/>
        public event MediaImageProvider_GetAllCompletedEventHandler MediaImageProvider_GetAllCompleted;
        
        /// <remarks/>
        public event MediaImageProvider_GetPagedCompletedEventHandler MediaImageProvider_GetPagedCompleted;
        
        /// <remarks/>
        public event MediaImageProvider_GetByIdCompletedEventHandler MediaImageProvider_GetByIdCompleted;
        
        /// <remarks/>
        public event MediaImageProvider_InsertCompletedEventHandler MediaImageProvider_InsertCompleted;
        
        /// <remarks/>
        public event MediaImageProvider_BulkInsertCompletedEventHandler MediaImageProvider_BulkInsertCompleted;
        
        /// <remarks/>
        public event MediaImageProvider_UpdateCompletedEventHandler MediaImageProvider_UpdateCompleted;
        
        /// <remarks/>
        public event MediaVideoProvider_DeleteCompletedEventHandler MediaVideoProvider_DeleteCompleted;
        
        /// <remarks/>
        public event MediaVideoProvider_FindCompletedEventHandler MediaVideoProvider_FindCompleted;
        
        /// <remarks/>
        public event MediaVideoProvider_GetAllCompletedEventHandler MediaVideoProvider_GetAllCompleted;
        
        /// <remarks/>
        public event MediaVideoProvider_GetPagedCompletedEventHandler MediaVideoProvider_GetPagedCompleted;
        
        /// <remarks/>
        public event MediaVideoProvider_GetByIdCompletedEventHandler MediaVideoProvider_GetByIdCompleted;
        
        /// <remarks/>
        public event MediaVideoProvider_InsertCompletedEventHandler MediaVideoProvider_InsertCompleted;
        
        /// <remarks/>
        public event MediaVideoProvider_BulkInsertCompletedEventHandler MediaVideoProvider_BulkInsertCompleted;
        
        /// <remarks/>
        public event MediaVideoProvider_UpdateCompletedEventHandler MediaVideoProvider_UpdateCompleted;
        
        /// <remarks/>
        public event MediaAudioProvider_DeleteCompletedEventHandler MediaAudioProvider_DeleteCompleted;
        
        /// <remarks/>
        public event MediaAudioProvider_FindCompletedEventHandler MediaAudioProvider_FindCompleted;
        
        /// <remarks/>
        public event MediaAudioProvider_GetAllCompletedEventHandler MediaAudioProvider_GetAllCompleted;
        
        /// <remarks/>
        public event MediaAudioProvider_GetPagedCompletedEventHandler MediaAudioProvider_GetPagedCompleted;
        
        /// <remarks/>
        public event MediaAudioProvider_GetByIdCompletedEventHandler MediaAudioProvider_GetByIdCompleted;
        
        /// <remarks/>
        public event MediaAudioProvider_InsertCompletedEventHandler MediaAudioProvider_InsertCompleted;
        
        /// <remarks/>
        public event MediaAudioProvider_BulkInsertCompletedEventHandler MediaAudioProvider_BulkInsertCompleted;
        
        /// <remarks/>
        public event MediaAudioProvider_UpdateCompletedEventHandler MediaAudioProvider_UpdateCompleted;
        
        /// <remarks/>
        public event PreviewsProvider_DeleteCompletedEventHandler PreviewsProvider_DeleteCompleted;
        
        /// <remarks/>
        public event PreviewsProvider_FindCompletedEventHandler PreviewsProvider_FindCompleted;
        
        /// <remarks/>
        public event PreviewsProvider_GetAllCompletedEventHandler PreviewsProvider_GetAllCompleted;
        
        /// <remarks/>
        public event PreviewsProvider_GetPagedCompletedEventHandler PreviewsProvider_GetPagedCompleted;
        
        /// <remarks/>
        public event PreviewsProvider_GetByMediumIdCompletedEventHandler PreviewsProvider_GetByMediumIdCompleted;
        
        /// <remarks/>
        public event PreviewsProvider_GetByIdCompletedEventHandler PreviewsProvider_GetByIdCompleted;
        
        /// <remarks/>
        public event PreviewsProvider_InsertCompletedEventHandler PreviewsProvider_InsertCompleted;
        
        /// <remarks/>
        public event PreviewsProvider_BulkInsertCompletedEventHandler PreviewsProvider_BulkInsertCompleted;
        
        /// <remarks/>
        public event PreviewsProvider_UpdateCompletedEventHandler PreviewsProvider_UpdateCompleted;
        
        /// <remarks/>
        public event ExecuteNonQueryCompletedEventHandler ExecuteNonQueryCompleted;
        
        /// <remarks/>
        public event ExecuteNonQuery1CompletedEventHandler ExecuteNonQuery1Completed;
        
        /// <remarks/>
        public event ExecuteDataSetCompletedEventHandler ExecuteDataSetCompleted;
        
        /// <remarks/>
        public event ExecuteDataSet1CompletedEventHandler ExecuteDataSet1Completed;
        
        /// <remarks/>
        public event ExecuteScalarCompletedEventHandler ExecuteScalarCompleted;
        
        /// <remarks/>
        public event ExecuteScalar1CompletedEventHandler ExecuteScalar1Completed;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaProvider_Delete", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MediaProvider_Delete(System.Guid _id) {
            object[] results = this.Invoke("MediaProvider_Delete", new object[] {
                        _id});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MediaProvider_DeleteAsync(System.Guid _id) {
            this.MediaProvider_DeleteAsync(_id, null);
        }
        
        /// <remarks/>
        public void MediaProvider_DeleteAsync(System.Guid _id, object userState) {
            if ((this.MediaProvider_DeleteOperationCompleted == null)) {
                this.MediaProvider_DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaProvider_DeleteOperationCompleted);
            }
            this.InvokeAsync("MediaProvider_Delete", new object[] {
                        _id}, this.MediaProvider_DeleteOperationCompleted, userState);
        }
        
        private void OnMediaProvider_DeleteOperationCompleted(object arg) {
            if ((this.MediaProvider_DeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaProvider_DeleteCompleted(this, new MediaProvider_DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaProvider_Find", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Media[] MediaProvider_Find(string whereClause, int start, int pageLength, out int count) {
            object[] results = this.Invoke("MediaProvider_Find", new object[] {
                        whereClause,
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((Media[])(results[0]));
        }
        
        /// <remarks/>
        public void MediaProvider_FindAsync(string whereClause, int start, int pageLength) {
            this.MediaProvider_FindAsync(whereClause, start, pageLength, null);
        }
        
        /// <remarks/>
        public void MediaProvider_FindAsync(string whereClause, int start, int pageLength, object userState) {
            if ((this.MediaProvider_FindOperationCompleted == null)) {
                this.MediaProvider_FindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaProvider_FindOperationCompleted);
            }
            this.InvokeAsync("MediaProvider_Find", new object[] {
                        whereClause,
                        start,
                        pageLength}, this.MediaProvider_FindOperationCompleted, userState);
        }
        
        private void OnMediaProvider_FindOperationCompleted(object arg) {
            if ((this.MediaProvider_FindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaProvider_FindCompleted(this, new MediaProvider_FindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaProvider_GetAll", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Media[] MediaProvider_GetAll(int start, int pageLength, out int count) {
            object[] results = this.Invoke("MediaProvider_GetAll", new object[] {
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((Media[])(results[0]));
        }
        
        /// <remarks/>
        public void MediaProvider_GetAllAsync(int start, int pageLength) {
            this.MediaProvider_GetAllAsync(start, pageLength, null);
        }
        
        /// <remarks/>
        public void MediaProvider_GetAllAsync(int start, int pageLength, object userState) {
            if ((this.MediaProvider_GetAllOperationCompleted == null)) {
                this.MediaProvider_GetAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaProvider_GetAllOperationCompleted);
            }
            this.InvokeAsync("MediaProvider_GetAll", new object[] {
                        start,
                        pageLength}, this.MediaProvider_GetAllOperationCompleted, userState);
        }
        
        private void OnMediaProvider_GetAllOperationCompleted(object arg) {
            if ((this.MediaProvider_GetAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaProvider_GetAllCompleted(this, new MediaProvider_GetAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaProvider_GetPaged", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Media[] MediaProvider_GetPaged(string whereClause, string orderBy, int start, int pageLength, out int count) {
            object[] results = this.Invoke("MediaProvider_GetPaged", new object[] {
                        whereClause,
                        orderBy,
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((Media[])(results[0]));
        }
        
        /// <remarks/>
        public void MediaProvider_GetPagedAsync(string whereClause, string orderBy, int start, int pageLength) {
            this.MediaProvider_GetPagedAsync(whereClause, orderBy, start, pageLength, null);
        }
        
        /// <remarks/>
        public void MediaProvider_GetPagedAsync(string whereClause, string orderBy, int start, int pageLength, object userState) {
            if ((this.MediaProvider_GetPagedOperationCompleted == null)) {
                this.MediaProvider_GetPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaProvider_GetPagedOperationCompleted);
            }
            this.InvokeAsync("MediaProvider_GetPaged", new object[] {
                        whereClause,
                        orderBy,
                        start,
                        pageLength}, this.MediaProvider_GetPagedOperationCompleted, userState);
        }
        
        private void OnMediaProvider_GetPagedOperationCompleted(object arg) {
            if ((this.MediaProvider_GetPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaProvider_GetPagedCompleted(this, new MediaProvider_GetPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaProvider_GetById", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Media MediaProvider_GetById(System.Guid _id, int start, int pageLength, out int count) {
            object[] results = this.Invoke("MediaProvider_GetById", new object[] {
                        _id,
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((Media)(results[0]));
        }
        
        /// <remarks/>
        public void MediaProvider_GetByIdAsync(System.Guid _id, int start, int pageLength) {
            this.MediaProvider_GetByIdAsync(_id, start, pageLength, null);
        }
        
        /// <remarks/>
        public void MediaProvider_GetByIdAsync(System.Guid _id, int start, int pageLength, object userState) {
            if ((this.MediaProvider_GetByIdOperationCompleted == null)) {
                this.MediaProvider_GetByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaProvider_GetByIdOperationCompleted);
            }
            this.InvokeAsync("MediaProvider_GetById", new object[] {
                        _id,
                        start,
                        pageLength}, this.MediaProvider_GetByIdOperationCompleted, userState);
        }
        
        private void OnMediaProvider_GetByIdOperationCompleted(object arg) {
            if ((this.MediaProvider_GetByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaProvider_GetByIdCompleted(this, new MediaProvider_GetByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaProvider_Insert", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Media MediaProvider_Insert(Media entity) {
            object[] results = this.Invoke("MediaProvider_Insert", new object[] {
                        entity});
            return ((Media)(results[0]));
        }
        
        /// <remarks/>
        public void MediaProvider_InsertAsync(Media entity) {
            this.MediaProvider_InsertAsync(entity, null);
        }
        
        /// <remarks/>
        public void MediaProvider_InsertAsync(Media entity, object userState) {
            if ((this.MediaProvider_InsertOperationCompleted == null)) {
                this.MediaProvider_InsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaProvider_InsertOperationCompleted);
            }
            this.InvokeAsync("MediaProvider_Insert", new object[] {
                        entity}, this.MediaProvider_InsertOperationCompleted, userState);
        }
        
        private void OnMediaProvider_InsertOperationCompleted(object arg) {
            if ((this.MediaProvider_InsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaProvider_InsertCompleted(this, new MediaProvider_InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaProvider_BulkInsert", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MediaProvider_BulkInsert(Media[] entityList) {
            this.Invoke("MediaProvider_BulkInsert", new object[] {
                        entityList});
        }
        
        /// <remarks/>
        public void MediaProvider_BulkInsertAsync(Media[] entityList) {
            this.MediaProvider_BulkInsertAsync(entityList, null);
        }
        
        /// <remarks/>
        public void MediaProvider_BulkInsertAsync(Media[] entityList, object userState) {
            if ((this.MediaProvider_BulkInsertOperationCompleted == null)) {
                this.MediaProvider_BulkInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaProvider_BulkInsertOperationCompleted);
            }
            this.InvokeAsync("MediaProvider_BulkInsert", new object[] {
                        entityList}, this.MediaProvider_BulkInsertOperationCompleted, userState);
        }
        
        private void OnMediaProvider_BulkInsertOperationCompleted(object arg) {
            if ((this.MediaProvider_BulkInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaProvider_BulkInsertCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaProvider_Update", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Media MediaProvider_Update(Media entity) {
            object[] results = this.Invoke("MediaProvider_Update", new object[] {
                        entity});
            return ((Media)(results[0]));
        }
        
        /// <remarks/>
        public void MediaProvider_UpdateAsync(Media entity) {
            this.MediaProvider_UpdateAsync(entity, null);
        }
        
        /// <remarks/>
        public void MediaProvider_UpdateAsync(Media entity, object userState) {
            if ((this.MediaProvider_UpdateOperationCompleted == null)) {
                this.MediaProvider_UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaProvider_UpdateOperationCompleted);
            }
            this.InvokeAsync("MediaProvider_Update", new object[] {
                        entity}, this.MediaProvider_UpdateOperationCompleted, userState);
        }
        
        private void OnMediaProvider_UpdateOperationCompleted(object arg) {
            if ((this.MediaProvider_UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaProvider_UpdateCompleted(this, new MediaProvider_UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaImageProvider_Delete", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MediaImageProvider_Delete(System.Guid _id) {
            object[] results = this.Invoke("MediaImageProvider_Delete", new object[] {
                        _id});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MediaImageProvider_DeleteAsync(System.Guid _id) {
            this.MediaImageProvider_DeleteAsync(_id, null);
        }
        
        /// <remarks/>
        public void MediaImageProvider_DeleteAsync(System.Guid _id, object userState) {
            if ((this.MediaImageProvider_DeleteOperationCompleted == null)) {
                this.MediaImageProvider_DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaImageProvider_DeleteOperationCompleted);
            }
            this.InvokeAsync("MediaImageProvider_Delete", new object[] {
                        _id}, this.MediaImageProvider_DeleteOperationCompleted, userState);
        }
        
        private void OnMediaImageProvider_DeleteOperationCompleted(object arg) {
            if ((this.MediaImageProvider_DeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaImageProvider_DeleteCompleted(this, new MediaImageProvider_DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaImageProvider_Find", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaImage[] MediaImageProvider_Find(string whereClause, int start, int pageLength, out int count) {
            object[] results = this.Invoke("MediaImageProvider_Find", new object[] {
                        whereClause,
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((MediaImage[])(results[0]));
        }
        
        /// <remarks/>
        public void MediaImageProvider_FindAsync(string whereClause, int start, int pageLength) {
            this.MediaImageProvider_FindAsync(whereClause, start, pageLength, null);
        }
        
        /// <remarks/>
        public void MediaImageProvider_FindAsync(string whereClause, int start, int pageLength, object userState) {
            if ((this.MediaImageProvider_FindOperationCompleted == null)) {
                this.MediaImageProvider_FindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaImageProvider_FindOperationCompleted);
            }
            this.InvokeAsync("MediaImageProvider_Find", new object[] {
                        whereClause,
                        start,
                        pageLength}, this.MediaImageProvider_FindOperationCompleted, userState);
        }
        
        private void OnMediaImageProvider_FindOperationCompleted(object arg) {
            if ((this.MediaImageProvider_FindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaImageProvider_FindCompleted(this, new MediaImageProvider_FindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaImageProvider_GetAll", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaImage[] MediaImageProvider_GetAll(int start, int pageLength, out int count) {
            object[] results = this.Invoke("MediaImageProvider_GetAll", new object[] {
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((MediaImage[])(results[0]));
        }
        
        /// <remarks/>
        public void MediaImageProvider_GetAllAsync(int start, int pageLength) {
            this.MediaImageProvider_GetAllAsync(start, pageLength, null);
        }
        
        /// <remarks/>
        public void MediaImageProvider_GetAllAsync(int start, int pageLength, object userState) {
            if ((this.MediaImageProvider_GetAllOperationCompleted == null)) {
                this.MediaImageProvider_GetAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaImageProvider_GetAllOperationCompleted);
            }
            this.InvokeAsync("MediaImageProvider_GetAll", new object[] {
                        start,
                        pageLength}, this.MediaImageProvider_GetAllOperationCompleted, userState);
        }
        
        private void OnMediaImageProvider_GetAllOperationCompleted(object arg) {
            if ((this.MediaImageProvider_GetAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaImageProvider_GetAllCompleted(this, new MediaImageProvider_GetAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaImageProvider_GetPaged", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaImage[] MediaImageProvider_GetPaged(string whereClause, string orderBy, int start, int pageLength, out int count) {
            object[] results = this.Invoke("MediaImageProvider_GetPaged", new object[] {
                        whereClause,
                        orderBy,
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((MediaImage[])(results[0]));
        }
        
        /// <remarks/>
        public void MediaImageProvider_GetPagedAsync(string whereClause, string orderBy, int start, int pageLength) {
            this.MediaImageProvider_GetPagedAsync(whereClause, orderBy, start, pageLength, null);
        }
        
        /// <remarks/>
        public void MediaImageProvider_GetPagedAsync(string whereClause, string orderBy, int start, int pageLength, object userState) {
            if ((this.MediaImageProvider_GetPagedOperationCompleted == null)) {
                this.MediaImageProvider_GetPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaImageProvider_GetPagedOperationCompleted);
            }
            this.InvokeAsync("MediaImageProvider_GetPaged", new object[] {
                        whereClause,
                        orderBy,
                        start,
                        pageLength}, this.MediaImageProvider_GetPagedOperationCompleted, userState);
        }
        
        private void OnMediaImageProvider_GetPagedOperationCompleted(object arg) {
            if ((this.MediaImageProvider_GetPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaImageProvider_GetPagedCompleted(this, new MediaImageProvider_GetPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaImageProvider_GetById", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaImage MediaImageProvider_GetById(System.Guid _id, int start, int pageLength, out int count) {
            object[] results = this.Invoke("MediaImageProvider_GetById", new object[] {
                        _id,
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((MediaImage)(results[0]));
        }
        
        /// <remarks/>
        public void MediaImageProvider_GetByIdAsync(System.Guid _id, int start, int pageLength) {
            this.MediaImageProvider_GetByIdAsync(_id, start, pageLength, null);
        }
        
        /// <remarks/>
        public void MediaImageProvider_GetByIdAsync(System.Guid _id, int start, int pageLength, object userState) {
            if ((this.MediaImageProvider_GetByIdOperationCompleted == null)) {
                this.MediaImageProvider_GetByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaImageProvider_GetByIdOperationCompleted);
            }
            this.InvokeAsync("MediaImageProvider_GetById", new object[] {
                        _id,
                        start,
                        pageLength}, this.MediaImageProvider_GetByIdOperationCompleted, userState);
        }
        
        private void OnMediaImageProvider_GetByIdOperationCompleted(object arg) {
            if ((this.MediaImageProvider_GetByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaImageProvider_GetByIdCompleted(this, new MediaImageProvider_GetByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaImageProvider_Insert", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaImage MediaImageProvider_Insert(MediaImage entity) {
            object[] results = this.Invoke("MediaImageProvider_Insert", new object[] {
                        entity});
            return ((MediaImage)(results[0]));
        }
        
        /// <remarks/>
        public void MediaImageProvider_InsertAsync(MediaImage entity) {
            this.MediaImageProvider_InsertAsync(entity, null);
        }
        
        /// <remarks/>
        public void MediaImageProvider_InsertAsync(MediaImage entity, object userState) {
            if ((this.MediaImageProvider_InsertOperationCompleted == null)) {
                this.MediaImageProvider_InsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaImageProvider_InsertOperationCompleted);
            }
            this.InvokeAsync("MediaImageProvider_Insert", new object[] {
                        entity}, this.MediaImageProvider_InsertOperationCompleted, userState);
        }
        
        private void OnMediaImageProvider_InsertOperationCompleted(object arg) {
            if ((this.MediaImageProvider_InsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaImageProvider_InsertCompleted(this, new MediaImageProvider_InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaImageProvider_BulkInsert", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MediaImageProvider_BulkInsert(MediaImage[] entityList) {
            this.Invoke("MediaImageProvider_BulkInsert", new object[] {
                        entityList});
        }
        
        /// <remarks/>
        public void MediaImageProvider_BulkInsertAsync(MediaImage[] entityList) {
            this.MediaImageProvider_BulkInsertAsync(entityList, null);
        }
        
        /// <remarks/>
        public void MediaImageProvider_BulkInsertAsync(MediaImage[] entityList, object userState) {
            if ((this.MediaImageProvider_BulkInsertOperationCompleted == null)) {
                this.MediaImageProvider_BulkInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaImageProvider_BulkInsertOperationCompleted);
            }
            this.InvokeAsync("MediaImageProvider_BulkInsert", new object[] {
                        entityList}, this.MediaImageProvider_BulkInsertOperationCompleted, userState);
        }
        
        private void OnMediaImageProvider_BulkInsertOperationCompleted(object arg) {
            if ((this.MediaImageProvider_BulkInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaImageProvider_BulkInsertCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaImageProvider_Update", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaImage MediaImageProvider_Update(MediaImage entity) {
            object[] results = this.Invoke("MediaImageProvider_Update", new object[] {
                        entity});
            return ((MediaImage)(results[0]));
        }
        
        /// <remarks/>
        public void MediaImageProvider_UpdateAsync(MediaImage entity) {
            this.MediaImageProvider_UpdateAsync(entity, null);
        }
        
        /// <remarks/>
        public void MediaImageProvider_UpdateAsync(MediaImage entity, object userState) {
            if ((this.MediaImageProvider_UpdateOperationCompleted == null)) {
                this.MediaImageProvider_UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaImageProvider_UpdateOperationCompleted);
            }
            this.InvokeAsync("MediaImageProvider_Update", new object[] {
                        entity}, this.MediaImageProvider_UpdateOperationCompleted, userState);
        }
        
        private void OnMediaImageProvider_UpdateOperationCompleted(object arg) {
            if ((this.MediaImageProvider_UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaImageProvider_UpdateCompleted(this, new MediaImageProvider_UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaVideoProvider_Delete", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MediaVideoProvider_Delete(System.Guid _id) {
            object[] results = this.Invoke("MediaVideoProvider_Delete", new object[] {
                        _id});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MediaVideoProvider_DeleteAsync(System.Guid _id) {
            this.MediaVideoProvider_DeleteAsync(_id, null);
        }
        
        /// <remarks/>
        public void MediaVideoProvider_DeleteAsync(System.Guid _id, object userState) {
            if ((this.MediaVideoProvider_DeleteOperationCompleted == null)) {
                this.MediaVideoProvider_DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaVideoProvider_DeleteOperationCompleted);
            }
            this.InvokeAsync("MediaVideoProvider_Delete", new object[] {
                        _id}, this.MediaVideoProvider_DeleteOperationCompleted, userState);
        }
        
        private void OnMediaVideoProvider_DeleteOperationCompleted(object arg) {
            if ((this.MediaVideoProvider_DeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaVideoProvider_DeleteCompleted(this, new MediaVideoProvider_DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaVideoProvider_Find", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaVideo[] MediaVideoProvider_Find(string whereClause, int start, int pageLength, out int count) {
            object[] results = this.Invoke("MediaVideoProvider_Find", new object[] {
                        whereClause,
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((MediaVideo[])(results[0]));
        }
        
        /// <remarks/>
        public void MediaVideoProvider_FindAsync(string whereClause, int start, int pageLength) {
            this.MediaVideoProvider_FindAsync(whereClause, start, pageLength, null);
        }
        
        /// <remarks/>
        public void MediaVideoProvider_FindAsync(string whereClause, int start, int pageLength, object userState) {
            if ((this.MediaVideoProvider_FindOperationCompleted == null)) {
                this.MediaVideoProvider_FindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaVideoProvider_FindOperationCompleted);
            }
            this.InvokeAsync("MediaVideoProvider_Find", new object[] {
                        whereClause,
                        start,
                        pageLength}, this.MediaVideoProvider_FindOperationCompleted, userState);
        }
        
        private void OnMediaVideoProvider_FindOperationCompleted(object arg) {
            if ((this.MediaVideoProvider_FindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaVideoProvider_FindCompleted(this, new MediaVideoProvider_FindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaVideoProvider_GetAll", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaVideo[] MediaVideoProvider_GetAll(int start, int pageLength, out int count) {
            object[] results = this.Invoke("MediaVideoProvider_GetAll", new object[] {
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((MediaVideo[])(results[0]));
        }
        
        /// <remarks/>
        public void MediaVideoProvider_GetAllAsync(int start, int pageLength) {
            this.MediaVideoProvider_GetAllAsync(start, pageLength, null);
        }
        
        /// <remarks/>
        public void MediaVideoProvider_GetAllAsync(int start, int pageLength, object userState) {
            if ((this.MediaVideoProvider_GetAllOperationCompleted == null)) {
                this.MediaVideoProvider_GetAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaVideoProvider_GetAllOperationCompleted);
            }
            this.InvokeAsync("MediaVideoProvider_GetAll", new object[] {
                        start,
                        pageLength}, this.MediaVideoProvider_GetAllOperationCompleted, userState);
        }
        
        private void OnMediaVideoProvider_GetAllOperationCompleted(object arg) {
            if ((this.MediaVideoProvider_GetAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaVideoProvider_GetAllCompleted(this, new MediaVideoProvider_GetAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaVideoProvider_GetPaged", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaVideo[] MediaVideoProvider_GetPaged(string whereClause, string orderBy, int start, int pageLength, out int count) {
            object[] results = this.Invoke("MediaVideoProvider_GetPaged", new object[] {
                        whereClause,
                        orderBy,
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((MediaVideo[])(results[0]));
        }
        
        /// <remarks/>
        public void MediaVideoProvider_GetPagedAsync(string whereClause, string orderBy, int start, int pageLength) {
            this.MediaVideoProvider_GetPagedAsync(whereClause, orderBy, start, pageLength, null);
        }
        
        /// <remarks/>
        public void MediaVideoProvider_GetPagedAsync(string whereClause, string orderBy, int start, int pageLength, object userState) {
            if ((this.MediaVideoProvider_GetPagedOperationCompleted == null)) {
                this.MediaVideoProvider_GetPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaVideoProvider_GetPagedOperationCompleted);
            }
            this.InvokeAsync("MediaVideoProvider_GetPaged", new object[] {
                        whereClause,
                        orderBy,
                        start,
                        pageLength}, this.MediaVideoProvider_GetPagedOperationCompleted, userState);
        }
        
        private void OnMediaVideoProvider_GetPagedOperationCompleted(object arg) {
            if ((this.MediaVideoProvider_GetPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaVideoProvider_GetPagedCompleted(this, new MediaVideoProvider_GetPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaVideoProvider_GetById", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaVideo MediaVideoProvider_GetById(System.Guid _id, int start, int pageLength, out int count) {
            object[] results = this.Invoke("MediaVideoProvider_GetById", new object[] {
                        _id,
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((MediaVideo)(results[0]));
        }
        
        /// <remarks/>
        public void MediaVideoProvider_GetByIdAsync(System.Guid _id, int start, int pageLength) {
            this.MediaVideoProvider_GetByIdAsync(_id, start, pageLength, null);
        }
        
        /// <remarks/>
        public void MediaVideoProvider_GetByIdAsync(System.Guid _id, int start, int pageLength, object userState) {
            if ((this.MediaVideoProvider_GetByIdOperationCompleted == null)) {
                this.MediaVideoProvider_GetByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaVideoProvider_GetByIdOperationCompleted);
            }
            this.InvokeAsync("MediaVideoProvider_GetById", new object[] {
                        _id,
                        start,
                        pageLength}, this.MediaVideoProvider_GetByIdOperationCompleted, userState);
        }
        
        private void OnMediaVideoProvider_GetByIdOperationCompleted(object arg) {
            if ((this.MediaVideoProvider_GetByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaVideoProvider_GetByIdCompleted(this, new MediaVideoProvider_GetByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaVideoProvider_Insert", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaVideo MediaVideoProvider_Insert(MediaVideo entity) {
            object[] results = this.Invoke("MediaVideoProvider_Insert", new object[] {
                        entity});
            return ((MediaVideo)(results[0]));
        }
        
        /// <remarks/>
        public void MediaVideoProvider_InsertAsync(MediaVideo entity) {
            this.MediaVideoProvider_InsertAsync(entity, null);
        }
        
        /// <remarks/>
        public void MediaVideoProvider_InsertAsync(MediaVideo entity, object userState) {
            if ((this.MediaVideoProvider_InsertOperationCompleted == null)) {
                this.MediaVideoProvider_InsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaVideoProvider_InsertOperationCompleted);
            }
            this.InvokeAsync("MediaVideoProvider_Insert", new object[] {
                        entity}, this.MediaVideoProvider_InsertOperationCompleted, userState);
        }
        
        private void OnMediaVideoProvider_InsertOperationCompleted(object arg) {
            if ((this.MediaVideoProvider_InsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaVideoProvider_InsertCompleted(this, new MediaVideoProvider_InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaVideoProvider_BulkInsert", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MediaVideoProvider_BulkInsert(MediaVideo[] entityList) {
            this.Invoke("MediaVideoProvider_BulkInsert", new object[] {
                        entityList});
        }
        
        /// <remarks/>
        public void MediaVideoProvider_BulkInsertAsync(MediaVideo[] entityList) {
            this.MediaVideoProvider_BulkInsertAsync(entityList, null);
        }
        
        /// <remarks/>
        public void MediaVideoProvider_BulkInsertAsync(MediaVideo[] entityList, object userState) {
            if ((this.MediaVideoProvider_BulkInsertOperationCompleted == null)) {
                this.MediaVideoProvider_BulkInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaVideoProvider_BulkInsertOperationCompleted);
            }
            this.InvokeAsync("MediaVideoProvider_BulkInsert", new object[] {
                        entityList}, this.MediaVideoProvider_BulkInsertOperationCompleted, userState);
        }
        
        private void OnMediaVideoProvider_BulkInsertOperationCompleted(object arg) {
            if ((this.MediaVideoProvider_BulkInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaVideoProvider_BulkInsertCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaVideoProvider_Update", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaVideo MediaVideoProvider_Update(MediaVideo entity) {
            object[] results = this.Invoke("MediaVideoProvider_Update", new object[] {
                        entity});
            return ((MediaVideo)(results[0]));
        }
        
        /// <remarks/>
        public void MediaVideoProvider_UpdateAsync(MediaVideo entity) {
            this.MediaVideoProvider_UpdateAsync(entity, null);
        }
        
        /// <remarks/>
        public void MediaVideoProvider_UpdateAsync(MediaVideo entity, object userState) {
            if ((this.MediaVideoProvider_UpdateOperationCompleted == null)) {
                this.MediaVideoProvider_UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaVideoProvider_UpdateOperationCompleted);
            }
            this.InvokeAsync("MediaVideoProvider_Update", new object[] {
                        entity}, this.MediaVideoProvider_UpdateOperationCompleted, userState);
        }
        
        private void OnMediaVideoProvider_UpdateOperationCompleted(object arg) {
            if ((this.MediaVideoProvider_UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaVideoProvider_UpdateCompleted(this, new MediaVideoProvider_UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaAudioProvider_Delete", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MediaAudioProvider_Delete(System.Guid _id) {
            object[] results = this.Invoke("MediaAudioProvider_Delete", new object[] {
                        _id});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MediaAudioProvider_DeleteAsync(System.Guid _id) {
            this.MediaAudioProvider_DeleteAsync(_id, null);
        }
        
        /// <remarks/>
        public void MediaAudioProvider_DeleteAsync(System.Guid _id, object userState) {
            if ((this.MediaAudioProvider_DeleteOperationCompleted == null)) {
                this.MediaAudioProvider_DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaAudioProvider_DeleteOperationCompleted);
            }
            this.InvokeAsync("MediaAudioProvider_Delete", new object[] {
                        _id}, this.MediaAudioProvider_DeleteOperationCompleted, userState);
        }
        
        private void OnMediaAudioProvider_DeleteOperationCompleted(object arg) {
            if ((this.MediaAudioProvider_DeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaAudioProvider_DeleteCompleted(this, new MediaAudioProvider_DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaAudioProvider_Find", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaAudio[] MediaAudioProvider_Find(string whereClause, int start, int pageLength, out int count) {
            object[] results = this.Invoke("MediaAudioProvider_Find", new object[] {
                        whereClause,
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((MediaAudio[])(results[0]));
        }
        
        /// <remarks/>
        public void MediaAudioProvider_FindAsync(string whereClause, int start, int pageLength) {
            this.MediaAudioProvider_FindAsync(whereClause, start, pageLength, null);
        }
        
        /// <remarks/>
        public void MediaAudioProvider_FindAsync(string whereClause, int start, int pageLength, object userState) {
            if ((this.MediaAudioProvider_FindOperationCompleted == null)) {
                this.MediaAudioProvider_FindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaAudioProvider_FindOperationCompleted);
            }
            this.InvokeAsync("MediaAudioProvider_Find", new object[] {
                        whereClause,
                        start,
                        pageLength}, this.MediaAudioProvider_FindOperationCompleted, userState);
        }
        
        private void OnMediaAudioProvider_FindOperationCompleted(object arg) {
            if ((this.MediaAudioProvider_FindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaAudioProvider_FindCompleted(this, new MediaAudioProvider_FindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaAudioProvider_GetAll", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaAudio[] MediaAudioProvider_GetAll(int start, int pageLength, out int count) {
            object[] results = this.Invoke("MediaAudioProvider_GetAll", new object[] {
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((MediaAudio[])(results[0]));
        }
        
        /// <remarks/>
        public void MediaAudioProvider_GetAllAsync(int start, int pageLength) {
            this.MediaAudioProvider_GetAllAsync(start, pageLength, null);
        }
        
        /// <remarks/>
        public void MediaAudioProvider_GetAllAsync(int start, int pageLength, object userState) {
            if ((this.MediaAudioProvider_GetAllOperationCompleted == null)) {
                this.MediaAudioProvider_GetAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaAudioProvider_GetAllOperationCompleted);
            }
            this.InvokeAsync("MediaAudioProvider_GetAll", new object[] {
                        start,
                        pageLength}, this.MediaAudioProvider_GetAllOperationCompleted, userState);
        }
        
        private void OnMediaAudioProvider_GetAllOperationCompleted(object arg) {
            if ((this.MediaAudioProvider_GetAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaAudioProvider_GetAllCompleted(this, new MediaAudioProvider_GetAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaAudioProvider_GetPaged", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaAudio[] MediaAudioProvider_GetPaged(string whereClause, string orderBy, int start, int pageLength, out int count) {
            object[] results = this.Invoke("MediaAudioProvider_GetPaged", new object[] {
                        whereClause,
                        orderBy,
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((MediaAudio[])(results[0]));
        }
        
        /// <remarks/>
        public void MediaAudioProvider_GetPagedAsync(string whereClause, string orderBy, int start, int pageLength) {
            this.MediaAudioProvider_GetPagedAsync(whereClause, orderBy, start, pageLength, null);
        }
        
        /// <remarks/>
        public void MediaAudioProvider_GetPagedAsync(string whereClause, string orderBy, int start, int pageLength, object userState) {
            if ((this.MediaAudioProvider_GetPagedOperationCompleted == null)) {
                this.MediaAudioProvider_GetPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaAudioProvider_GetPagedOperationCompleted);
            }
            this.InvokeAsync("MediaAudioProvider_GetPaged", new object[] {
                        whereClause,
                        orderBy,
                        start,
                        pageLength}, this.MediaAudioProvider_GetPagedOperationCompleted, userState);
        }
        
        private void OnMediaAudioProvider_GetPagedOperationCompleted(object arg) {
            if ((this.MediaAudioProvider_GetPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaAudioProvider_GetPagedCompleted(this, new MediaAudioProvider_GetPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaAudioProvider_GetById", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaAudio MediaAudioProvider_GetById(System.Guid _id, int start, int pageLength, out int count) {
            object[] results = this.Invoke("MediaAudioProvider_GetById", new object[] {
                        _id,
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((MediaAudio)(results[0]));
        }
        
        /// <remarks/>
        public void MediaAudioProvider_GetByIdAsync(System.Guid _id, int start, int pageLength) {
            this.MediaAudioProvider_GetByIdAsync(_id, start, pageLength, null);
        }
        
        /// <remarks/>
        public void MediaAudioProvider_GetByIdAsync(System.Guid _id, int start, int pageLength, object userState) {
            if ((this.MediaAudioProvider_GetByIdOperationCompleted == null)) {
                this.MediaAudioProvider_GetByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaAudioProvider_GetByIdOperationCompleted);
            }
            this.InvokeAsync("MediaAudioProvider_GetById", new object[] {
                        _id,
                        start,
                        pageLength}, this.MediaAudioProvider_GetByIdOperationCompleted, userState);
        }
        
        private void OnMediaAudioProvider_GetByIdOperationCompleted(object arg) {
            if ((this.MediaAudioProvider_GetByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaAudioProvider_GetByIdCompleted(this, new MediaAudioProvider_GetByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaAudioProvider_Insert", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaAudio MediaAudioProvider_Insert(MediaAudio entity) {
            object[] results = this.Invoke("MediaAudioProvider_Insert", new object[] {
                        entity});
            return ((MediaAudio)(results[0]));
        }
        
        /// <remarks/>
        public void MediaAudioProvider_InsertAsync(MediaAudio entity) {
            this.MediaAudioProvider_InsertAsync(entity, null);
        }
        
        /// <remarks/>
        public void MediaAudioProvider_InsertAsync(MediaAudio entity, object userState) {
            if ((this.MediaAudioProvider_InsertOperationCompleted == null)) {
                this.MediaAudioProvider_InsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaAudioProvider_InsertOperationCompleted);
            }
            this.InvokeAsync("MediaAudioProvider_Insert", new object[] {
                        entity}, this.MediaAudioProvider_InsertOperationCompleted, userState);
        }
        
        private void OnMediaAudioProvider_InsertOperationCompleted(object arg) {
            if ((this.MediaAudioProvider_InsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaAudioProvider_InsertCompleted(this, new MediaAudioProvider_InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaAudioProvider_BulkInsert", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MediaAudioProvider_BulkInsert(MediaAudio[] entityList) {
            this.Invoke("MediaAudioProvider_BulkInsert", new object[] {
                        entityList});
        }
        
        /// <remarks/>
        public void MediaAudioProvider_BulkInsertAsync(MediaAudio[] entityList) {
            this.MediaAudioProvider_BulkInsertAsync(entityList, null);
        }
        
        /// <remarks/>
        public void MediaAudioProvider_BulkInsertAsync(MediaAudio[] entityList, object userState) {
            if ((this.MediaAudioProvider_BulkInsertOperationCompleted == null)) {
                this.MediaAudioProvider_BulkInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaAudioProvider_BulkInsertOperationCompleted);
            }
            this.InvokeAsync("MediaAudioProvider_BulkInsert", new object[] {
                        entityList}, this.MediaAudioProvider_BulkInsertOperationCompleted, userState);
        }
        
        private void OnMediaAudioProvider_BulkInsertOperationCompleted(object arg) {
            if ((this.MediaAudioProvider_BulkInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaAudioProvider_BulkInsertCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/MediaAudioProvider_Update", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaAudio MediaAudioProvider_Update(MediaAudio entity) {
            object[] results = this.Invoke("MediaAudioProvider_Update", new object[] {
                        entity});
            return ((MediaAudio)(results[0]));
        }
        
        /// <remarks/>
        public void MediaAudioProvider_UpdateAsync(MediaAudio entity) {
            this.MediaAudioProvider_UpdateAsync(entity, null);
        }
        
        /// <remarks/>
        public void MediaAudioProvider_UpdateAsync(MediaAudio entity, object userState) {
            if ((this.MediaAudioProvider_UpdateOperationCompleted == null)) {
                this.MediaAudioProvider_UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaAudioProvider_UpdateOperationCompleted);
            }
            this.InvokeAsync("MediaAudioProvider_Update", new object[] {
                        entity}, this.MediaAudioProvider_UpdateOperationCompleted, userState);
        }
        
        private void OnMediaAudioProvider_UpdateOperationCompleted(object arg) {
            if ((this.MediaAudioProvider_UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MediaAudioProvider_UpdateCompleted(this, new MediaAudioProvider_UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/PreviewsProvider_Delete", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PreviewsProvider_Delete(System.Guid _id) {
            object[] results = this.Invoke("PreviewsProvider_Delete", new object[] {
                        _id});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PreviewsProvider_DeleteAsync(System.Guid _id) {
            this.PreviewsProvider_DeleteAsync(_id, null);
        }
        
        /// <remarks/>
        public void PreviewsProvider_DeleteAsync(System.Guid _id, object userState) {
            if ((this.PreviewsProvider_DeleteOperationCompleted == null)) {
                this.PreviewsProvider_DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPreviewsProvider_DeleteOperationCompleted);
            }
            this.InvokeAsync("PreviewsProvider_Delete", new object[] {
                        _id}, this.PreviewsProvider_DeleteOperationCompleted, userState);
        }
        
        private void OnPreviewsProvider_DeleteOperationCompleted(object arg) {
            if ((this.PreviewsProvider_DeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PreviewsProvider_DeleteCompleted(this, new PreviewsProvider_DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/PreviewsProvider_Find", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Previews[] PreviewsProvider_Find(string whereClause, int start, int pageLength, out int count) {
            object[] results = this.Invoke("PreviewsProvider_Find", new object[] {
                        whereClause,
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((Previews[])(results[0]));
        }
        
        /// <remarks/>
        public void PreviewsProvider_FindAsync(string whereClause, int start, int pageLength) {
            this.PreviewsProvider_FindAsync(whereClause, start, pageLength, null);
        }
        
        /// <remarks/>
        public void PreviewsProvider_FindAsync(string whereClause, int start, int pageLength, object userState) {
            if ((this.PreviewsProvider_FindOperationCompleted == null)) {
                this.PreviewsProvider_FindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPreviewsProvider_FindOperationCompleted);
            }
            this.InvokeAsync("PreviewsProvider_Find", new object[] {
                        whereClause,
                        start,
                        pageLength}, this.PreviewsProvider_FindOperationCompleted, userState);
        }
        
        private void OnPreviewsProvider_FindOperationCompleted(object arg) {
            if ((this.PreviewsProvider_FindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PreviewsProvider_FindCompleted(this, new PreviewsProvider_FindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/PreviewsProvider_GetAll", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Previews[] PreviewsProvider_GetAll(int start, int pageLength, out int count) {
            object[] results = this.Invoke("PreviewsProvider_GetAll", new object[] {
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((Previews[])(results[0]));
        }
        
        /// <remarks/>
        public void PreviewsProvider_GetAllAsync(int start, int pageLength) {
            this.PreviewsProvider_GetAllAsync(start, pageLength, null);
        }
        
        /// <remarks/>
        public void PreviewsProvider_GetAllAsync(int start, int pageLength, object userState) {
            if ((this.PreviewsProvider_GetAllOperationCompleted == null)) {
                this.PreviewsProvider_GetAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPreviewsProvider_GetAllOperationCompleted);
            }
            this.InvokeAsync("PreviewsProvider_GetAll", new object[] {
                        start,
                        pageLength}, this.PreviewsProvider_GetAllOperationCompleted, userState);
        }
        
        private void OnPreviewsProvider_GetAllOperationCompleted(object arg) {
            if ((this.PreviewsProvider_GetAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PreviewsProvider_GetAllCompleted(this, new PreviewsProvider_GetAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/PreviewsProvider_GetPaged", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Previews[] PreviewsProvider_GetPaged(string whereClause, string orderBy, int start, int pageLength, out int count) {
            object[] results = this.Invoke("PreviewsProvider_GetPaged", new object[] {
                        whereClause,
                        orderBy,
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((Previews[])(results[0]));
        }
        
        /// <remarks/>
        public void PreviewsProvider_GetPagedAsync(string whereClause, string orderBy, int start, int pageLength) {
            this.PreviewsProvider_GetPagedAsync(whereClause, orderBy, start, pageLength, null);
        }
        
        /// <remarks/>
        public void PreviewsProvider_GetPagedAsync(string whereClause, string orderBy, int start, int pageLength, object userState) {
            if ((this.PreviewsProvider_GetPagedOperationCompleted == null)) {
                this.PreviewsProvider_GetPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPreviewsProvider_GetPagedOperationCompleted);
            }
            this.InvokeAsync("PreviewsProvider_GetPaged", new object[] {
                        whereClause,
                        orderBy,
                        start,
                        pageLength}, this.PreviewsProvider_GetPagedOperationCompleted, userState);
        }
        
        private void OnPreviewsProvider_GetPagedOperationCompleted(object arg) {
            if ((this.PreviewsProvider_GetPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PreviewsProvider_GetPagedCompleted(this, new PreviewsProvider_GetPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/PreviewsProvider_GetByMediumId", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Previews[] PreviewsProvider_GetByMediumId(System.Guid _mediumId, int start, int pageLength, out int count) {
            object[] results = this.Invoke("PreviewsProvider_GetByMediumId", new object[] {
                        _mediumId,
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((Previews[])(results[0]));
        }
        
        /// <remarks/>
        public void PreviewsProvider_GetByMediumIdAsync(System.Guid _mediumId, int start, int pageLength) {
            this.PreviewsProvider_GetByMediumIdAsync(_mediumId, start, pageLength, null);
        }
        
        /// <remarks/>
        public void PreviewsProvider_GetByMediumIdAsync(System.Guid _mediumId, int start, int pageLength, object userState) {
            if ((this.PreviewsProvider_GetByMediumIdOperationCompleted == null)) {
                this.PreviewsProvider_GetByMediumIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPreviewsProvider_GetByMediumIdOperationCompleted);
            }
            this.InvokeAsync("PreviewsProvider_GetByMediumId", new object[] {
                        _mediumId,
                        start,
                        pageLength}, this.PreviewsProvider_GetByMediumIdOperationCompleted, userState);
        }
        
        private void OnPreviewsProvider_GetByMediumIdOperationCompleted(object arg) {
            if ((this.PreviewsProvider_GetByMediumIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PreviewsProvider_GetByMediumIdCompleted(this, new PreviewsProvider_GetByMediumIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/PreviewsProvider_GetById", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Previews PreviewsProvider_GetById(System.Guid _id, int start, int pageLength, out int count) {
            object[] results = this.Invoke("PreviewsProvider_GetById", new object[] {
                        _id,
                        start,
                        pageLength});
            count = ((int)(results[1]));
            return ((Previews)(results[0]));
        }
        
        /// <remarks/>
        public void PreviewsProvider_GetByIdAsync(System.Guid _id, int start, int pageLength) {
            this.PreviewsProvider_GetByIdAsync(_id, start, pageLength, null);
        }
        
        /// <remarks/>
        public void PreviewsProvider_GetByIdAsync(System.Guid _id, int start, int pageLength, object userState) {
            if ((this.PreviewsProvider_GetByIdOperationCompleted == null)) {
                this.PreviewsProvider_GetByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPreviewsProvider_GetByIdOperationCompleted);
            }
            this.InvokeAsync("PreviewsProvider_GetById", new object[] {
                        _id,
                        start,
                        pageLength}, this.PreviewsProvider_GetByIdOperationCompleted, userState);
        }
        
        private void OnPreviewsProvider_GetByIdOperationCompleted(object arg) {
            if ((this.PreviewsProvider_GetByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PreviewsProvider_GetByIdCompleted(this, new PreviewsProvider_GetByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/PreviewsProvider_Insert", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Previews PreviewsProvider_Insert(Previews entity) {
            object[] results = this.Invoke("PreviewsProvider_Insert", new object[] {
                        entity});
            return ((Previews)(results[0]));
        }
        
        /// <remarks/>
        public void PreviewsProvider_InsertAsync(Previews entity) {
            this.PreviewsProvider_InsertAsync(entity, null);
        }
        
        /// <remarks/>
        public void PreviewsProvider_InsertAsync(Previews entity, object userState) {
            if ((this.PreviewsProvider_InsertOperationCompleted == null)) {
                this.PreviewsProvider_InsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPreviewsProvider_InsertOperationCompleted);
            }
            this.InvokeAsync("PreviewsProvider_Insert", new object[] {
                        entity}, this.PreviewsProvider_InsertOperationCompleted, userState);
        }
        
        private void OnPreviewsProvider_InsertOperationCompleted(object arg) {
            if ((this.PreviewsProvider_InsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PreviewsProvider_InsertCompleted(this, new PreviewsProvider_InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/PreviewsProvider_BulkInsert", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PreviewsProvider_BulkInsert(Previews[] entityList) {
            this.Invoke("PreviewsProvider_BulkInsert", new object[] {
                        entityList});
        }
        
        /// <remarks/>
        public void PreviewsProvider_BulkInsertAsync(Previews[] entityList) {
            this.PreviewsProvider_BulkInsertAsync(entityList, null);
        }
        
        /// <remarks/>
        public void PreviewsProvider_BulkInsertAsync(Previews[] entityList, object userState) {
            if ((this.PreviewsProvider_BulkInsertOperationCompleted == null)) {
                this.PreviewsProvider_BulkInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPreviewsProvider_BulkInsertOperationCompleted);
            }
            this.InvokeAsync("PreviewsProvider_BulkInsert", new object[] {
                        entityList}, this.PreviewsProvider_BulkInsertOperationCompleted, userState);
        }
        
        private void OnPreviewsProvider_BulkInsertOperationCompleted(object arg) {
            if ((this.PreviewsProvider_BulkInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PreviewsProvider_BulkInsertCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/PreviewsProvider_Update", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Previews PreviewsProvider_Update(Previews entity) {
            object[] results = this.Invoke("PreviewsProvider_Update", new object[] {
                        entity});
            return ((Previews)(results[0]));
        }
        
        /// <remarks/>
        public void PreviewsProvider_UpdateAsync(Previews entity) {
            this.PreviewsProvider_UpdateAsync(entity, null);
        }
        
        /// <remarks/>
        public void PreviewsProvider_UpdateAsync(Previews entity, object userState) {
            if ((this.PreviewsProvider_UpdateOperationCompleted == null)) {
                this.PreviewsProvider_UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPreviewsProvider_UpdateOperationCompleted);
            }
            this.InvokeAsync("PreviewsProvider_Update", new object[] {
                        entity}, this.PreviewsProvider_UpdateOperationCompleted, userState);
        }
        
        private void OnPreviewsProvider_UpdateOperationCompleted(object arg) {
            if ((this.PreviewsProvider_UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PreviewsProvider_UpdateCompleted(this, new PreviewsProvider_UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/ExecuteNonQueryPs", RequestElementName="ExecuteNonQueryPs", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseElementName="ExecuteNonQueryPsResponse", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ExecuteNonQueryPsResult")]
        public int ExecuteNonQuery(string storedProcedureName, object[] parameterValues) {
            object[] results = this.Invoke("ExecuteNonQuery", new object[] {
                        storedProcedureName,
                        parameterValues});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteNonQueryAsync(string storedProcedureName, object[] parameterValues) {
            this.ExecuteNonQueryAsync(storedProcedureName, parameterValues, null);
        }
        
        /// <remarks/>
        public void ExecuteNonQueryAsync(string storedProcedureName, object[] parameterValues, object userState) {
            if ((this.ExecuteNonQueryOperationCompleted == null)) {
                this.ExecuteNonQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteNonQueryOperationCompleted);
            }
            this.InvokeAsync("ExecuteNonQuery", new object[] {
                        storedProcedureName,
                        parameterValues}, this.ExecuteNonQueryOperationCompleted, userState);
        }
        
        private void OnExecuteNonQueryOperationCompleted(object arg) {
            if ((this.ExecuteNonQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteNonQueryCompleted(this, new ExecuteNonQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ExecuteNonQuery1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/ExecuteNonQueryQry", RequestElementName="ExecuteNonQueryQry", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseElementName="ExecuteNonQueryQryResponse", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ExecuteNonQueryQryResult")]
        public int ExecuteNonQuery(CommandType commandType, string commandText) {
            object[] results = this.Invoke("ExecuteNonQuery1", new object[] {
                        commandType,
                        commandText});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteNonQuery1Async(CommandType commandType, string commandText) {
            this.ExecuteNonQuery1Async(commandType, commandText, null);
        }
        
        /// <remarks/>
        public void ExecuteNonQuery1Async(CommandType commandType, string commandText, object userState) {
            if ((this.ExecuteNonQuery1OperationCompleted == null)) {
                this.ExecuteNonQuery1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteNonQuery1OperationCompleted);
            }
            this.InvokeAsync("ExecuteNonQuery1", new object[] {
                        commandType,
                        commandText}, this.ExecuteNonQuery1OperationCompleted, userState);
        }
        
        private void OnExecuteNonQuery1OperationCompleted(object arg) {
            if ((this.ExecuteNonQuery1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteNonQuery1Completed(this, new ExecuteNonQuery1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/ExecuteDataSetPs", RequestElementName="ExecuteDataSetPs", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseElementName="ExecuteDataSetPsResponse", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ExecuteDataSetPsResult")]
        public System.Data.DataSet ExecuteDataSet(string storedProcedureName, object[] parameterValues) {
            object[] results = this.Invoke("ExecuteDataSet", new object[] {
                        storedProcedureName,
                        parameterValues});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteDataSetAsync(string storedProcedureName, object[] parameterValues) {
            this.ExecuteDataSetAsync(storedProcedureName, parameterValues, null);
        }
        
        /// <remarks/>
        public void ExecuteDataSetAsync(string storedProcedureName, object[] parameterValues, object userState) {
            if ((this.ExecuteDataSetOperationCompleted == null)) {
                this.ExecuteDataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteDataSetOperationCompleted);
            }
            this.InvokeAsync("ExecuteDataSet", new object[] {
                        storedProcedureName,
                        parameterValues}, this.ExecuteDataSetOperationCompleted, userState);
        }
        
        private void OnExecuteDataSetOperationCompleted(object arg) {
            if ((this.ExecuteDataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteDataSetCompleted(this, new ExecuteDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ExecuteDataSet1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/ExecuteDataSetQry", RequestElementName="ExecuteDataSetQry", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseElementName="ExecuteDataSetQryResponse", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ExecuteDataSetQryResult")]
        public System.Data.DataSet ExecuteDataSet(CommandType commandType, string commandText) {
            object[] results = this.Invoke("ExecuteDataSet1", new object[] {
                        commandType,
                        commandText});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteDataSet1Async(CommandType commandType, string commandText) {
            this.ExecuteDataSet1Async(commandType, commandText, null);
        }
        
        /// <remarks/>
        public void ExecuteDataSet1Async(CommandType commandType, string commandText, object userState) {
            if ((this.ExecuteDataSet1OperationCompleted == null)) {
                this.ExecuteDataSet1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteDataSet1OperationCompleted);
            }
            this.InvokeAsync("ExecuteDataSet1", new object[] {
                        commandType,
                        commandText}, this.ExecuteDataSet1OperationCompleted, userState);
        }
        
        private void OnExecuteDataSet1OperationCompleted(object arg) {
            if ((this.ExecuteDataSet1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteDataSet1Completed(this, new ExecuteDataSet1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/ExecuteScalarPs", RequestElementName="ExecuteScalarPs", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseElementName="ExecuteScalarPsResponse", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ExecuteScalarPsResult")]
        public object ExecuteScalar(string storedProcedureName, object[] parameterValues) {
            object[] results = this.Invoke("ExecuteScalar", new object[] {
                        storedProcedureName,
                        parameterValues});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteScalarAsync(string storedProcedureName, object[] parameterValues) {
            this.ExecuteScalarAsync(storedProcedureName, parameterValues, null);
        }
        
        /// <remarks/>
        public void ExecuteScalarAsync(string storedProcedureName, object[] parameterValues, object userState) {
            if ((this.ExecuteScalarOperationCompleted == null)) {
                this.ExecuteScalarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteScalarOperationCompleted);
            }
            this.InvokeAsync("ExecuteScalar", new object[] {
                        storedProcedureName,
                        parameterValues}, this.ExecuteScalarOperationCompleted, userState);
        }
        
        private void OnExecuteScalarOperationCompleted(object arg) {
            if ((this.ExecuteScalarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteScalarCompleted(this, new ExecuteScalarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ExecuteScalar1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ShutterTale.NetTiers/ExecuteScalarQry", RequestElementName="ExecuteScalarQry", RequestNamespace="http://localhost/ShutterTale.NetTiers/", ResponseElementName="ExecuteScalarQryResponse", ResponseNamespace="http://localhost/ShutterTale.NetTiers/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ExecuteScalarQryResult")]
        public object ExecuteScalar(CommandType commandType, string commandText) {
            object[] results = this.Invoke("ExecuteScalar1", new object[] {
                        commandType,
                        commandText});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteScalar1Async(CommandType commandType, string commandText) {
            this.ExecuteScalar1Async(commandType, commandText, null);
        }
        
        /// <remarks/>
        public void ExecuteScalar1Async(CommandType commandType, string commandText, object userState) {
            if ((this.ExecuteScalar1OperationCompleted == null)) {
                this.ExecuteScalar1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteScalar1OperationCompleted);
            }
            this.InvokeAsync("ExecuteScalar1", new object[] {
                        commandType,
                        commandText}, this.ExecuteScalar1OperationCompleted, userState);
        }
        
        private void OnExecuteScalar1OperationCompleted(object arg) {
            if ((this.ExecuteScalar1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteScalar1Completed(this, new ExecuteScalar1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/ShutterTale.NetTiers/")]
    public partial class Media : MediaBase {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Media))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/ShutterTale.NetTiers/")]
    public abstract partial class MediaBase : EntityBase {
        
        private System.Guid originalIdField;
        
        private System.Nullable<System.DateTime> captureDateTimeField;
        
        private System.DateTime fileDateTimeField;
        
        private System.DateTime importDateTimeField;
        
        private object locationField;
        
        private int pixelxField;
        
        private int pixelyField;
        
        private double dpiField;
        
        private string contentTypeField;
        
        private string makeField;
        
        private string modelField;
        
        private string softwareVersionField;
        
        private string originField;
        
        private int sizeField;
        
        private string quadkey18Field;
        
        private MediaImage mediaImageField;
        
        private MediaAudio mediaAudioField;
        
        private Previews[] previewsCollectionField;
        
        /// <remarks/>
        public System.Guid OriginalId {
            get {
                return this.originalIdField;
            }
            set {
                this.originalIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> CaptureDateTime {
            get {
                return this.captureDateTimeField;
            }
            set {
                this.captureDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime FileDateTime {
            get {
                return this.fileDateTimeField;
            }
            set {
                this.fileDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ImportDateTime {
            get {
                return this.importDateTimeField;
            }
            set {
                this.importDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        public int Pixelx {
            get {
                return this.pixelxField;
            }
            set {
                this.pixelxField = value;
            }
        }
        
        /// <remarks/>
        public int Pixely {
            get {
                return this.pixelyField;
            }
            set {
                this.pixelyField = value;
            }
        }
        
        /// <remarks/>
        public double Dpi {
            get {
                return this.dpiField;
            }
            set {
                this.dpiField = value;
            }
        }
        
        /// <remarks/>
        public string ContentType {
            get {
                return this.contentTypeField;
            }
            set {
                this.contentTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Make {
            get {
                return this.makeField;
            }
            set {
                this.makeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SoftwareVersion {
            get {
                return this.softwareVersionField;
            }
            set {
                this.softwareVersionField = value;
            }
        }
        
        /// <remarks/>
        public string Origin {
            get {
                return this.originField;
            }
            set {
                this.originField = value;
            }
        }
        
        /// <remarks/>
        public int Size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
        
        /// <remarks/>
        public string Quadkey18 {
            get {
                return this.quadkey18Field;
            }
            set {
                this.quadkey18Field = value;
            }
        }
        
        /// <remarks/>
        public MediaImage MediaImage {
            get {
                return this.mediaImageField;
            }
            set {
                this.mediaImageField = value;
            }
        }
        
        /// <remarks/>
        public MediaAudio MediaAudio {
            get {
                return this.mediaAudioField;
            }
            set {
                this.mediaAudioField = value;
            }
        }
        
        /// <remarks/>
        public Previews[] PreviewsCollection {
            get {
                return this.previewsCollectionField;
            }
            set {
                this.previewsCollectionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/ShutterTale.NetTiers/")]
    public partial class TimeSpan {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PreviewsBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Previews))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MediaVideoBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MediaVideo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MediaAudioBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MediaAudio))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MediaImageBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MediaImage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MediaBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Media))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/ShutterTale.NetTiers/")]
    public abstract partial class EntityBaseCore {
        
        private System.Guid idField;
        
        private object tagField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public object Tag {
            get {
                return this.tagField;
            }
            set {
                this.tagField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PreviewsBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Previews))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MediaVideoBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MediaVideo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MediaAudioBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MediaAudio))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MediaImageBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MediaImage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MediaBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Media))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/ShutterTale.NetTiers/")]
    public abstract partial class EntityBase : EntityBaseCore {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Previews))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/ShutterTale.NetTiers/")]
    public abstract partial class PreviewsBase : EntityBase {
        
        private System.Guid originalIdField;
        
        private byte[] level0Field;
        
        private byte[] level1Field;
        
        private byte[] level2Field;
        
        private byte[] level3Field;
        
        private string previewTypeField;
        
        private System.Guid mediumIdField;
        
        /// <remarks/>
        public System.Guid OriginalId {
            get {
                return this.originalIdField;
            }
            set {
                this.originalIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] Level0 {
            get {
                return this.level0Field;
            }
            set {
                this.level0Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] Level1 {
            get {
                return this.level1Field;
            }
            set {
                this.level1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] Level2 {
            get {
                return this.level2Field;
            }
            set {
                this.level2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] Level3 {
            get {
                return this.level3Field;
            }
            set {
                this.level3Field = value;
            }
        }
        
        /// <remarks/>
        public string PreviewType {
            get {
                return this.previewTypeField;
            }
            set {
                this.previewTypeField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid MediumId {
            get {
                return this.mediumIdField;
            }
            set {
                this.mediumIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/ShutterTale.NetTiers/")]
    public partial class Previews : PreviewsBase {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MediaVideo))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/ShutterTale.NetTiers/")]
    public abstract partial class MediaVideoBase : EntityBase {
        
        private byte videoChannelsField;
        
        private string videoCodecField;
        
        private System.Guid originalIdField;
        
        /// <remarks/>
        public byte VideoChannels {
            get {
                return this.videoChannelsField;
            }
            set {
                this.videoChannelsField = value;
            }
        }
        
        /// <remarks/>
        public string VideoCodec {
            get {
                return this.videoCodecField;
            }
            set {
                this.videoCodecField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid OriginalId {
            get {
                return this.originalIdField;
            }
            set {
                this.originalIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/ShutterTale.NetTiers/")]
    public partial class MediaVideo : MediaVideoBase {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MediaAudio))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/ShutterTale.NetTiers/")]
    public abstract partial class MediaAudioBase : EntityBase {
        
        private byte audioChannelsField;
        
        private string durationField;
        
        private string audioCodecField;
        
        private System.Guid originalIdField;
        
        private MediaVideo mediaVideoField;
        
        /// <remarks/>
        public byte AudioChannels {
            get {
                return this.audioChannelsField;
            }
            set {
                this.audioChannelsField = value;
            }
        }
        
        /// <remarks/>
        public string Duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
        
        /// <remarks/>
        public string AudioCodec {
            get {
                return this.audioCodecField;
            }
            set {
                this.audioCodecField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid OriginalId {
            get {
                return this.originalIdField;
            }
            set {
                this.originalIdField = value;
            }
        }
        
        /// <remarks/>
        public MediaVideo MediaVideo {
            get {
                return this.mediaVideoField;
            }
            set {
                this.mediaVideoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/ShutterTale.NetTiers/")]
    public partial class MediaAudio : MediaAudioBase {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MediaImage))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/ShutterTale.NetTiers/")]
    public abstract partial class MediaImageBase : EntityBase {
        
        private System.Nullable<byte> orientationField;
        
        private System.Nullable<byte> ycbCrPositioningField;
        
        private System.Nullable<double> exposureTimeField;
        
        private System.Nullable<double> fnumberField;
        
        private System.Nullable<byte> exposureProgramField;
        
        private System.Nullable<short> isoSpeedRatingsField;
        
        private System.Nullable<double> shutterSpeedValueField;
        
        private System.Nullable<double> apertureValueField;
        
        private System.Nullable<byte> meteringModeField;
        
        private System.Nullable<byte> flashField;
        
        private System.Nullable<double> focalLengthField;
        
        private string flashpixVersionField;
        
        private System.Nullable<byte> colorSpaceField;
        
        private System.Nullable<byte> sensingMethodField;
        
        private System.Nullable<byte> exposureModeField;
        
        private System.Nullable<byte> whiteBalanceField;
        
        private System.Nullable<byte> sceneCaptureTypeField;
        
        private System.Nullable<byte> sharpnessField;
        
        private System.Guid originalIdField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<byte> Orientation {
            get {
                return this.orientationField;
            }
            set {
                this.orientationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<byte> YcbCrPositioning {
            get {
                return this.ycbCrPositioningField;
            }
            set {
                this.ycbCrPositioningField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> ExposureTime {
            get {
                return this.exposureTimeField;
            }
            set {
                this.exposureTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> Fnumber {
            get {
                return this.fnumberField;
            }
            set {
                this.fnumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<byte> ExposureProgram {
            get {
                return this.exposureProgramField;
            }
            set {
                this.exposureProgramField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<short> IsoSpeedRatings {
            get {
                return this.isoSpeedRatingsField;
            }
            set {
                this.isoSpeedRatingsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> ShutterSpeedValue {
            get {
                return this.shutterSpeedValueField;
            }
            set {
                this.shutterSpeedValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> ApertureValue {
            get {
                return this.apertureValueField;
            }
            set {
                this.apertureValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<byte> MeteringMode {
            get {
                return this.meteringModeField;
            }
            set {
                this.meteringModeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<byte> Flash {
            get {
                return this.flashField;
            }
            set {
                this.flashField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> FocalLength {
            get {
                return this.focalLengthField;
            }
            set {
                this.focalLengthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string FlashpixVersion {
            get {
                return this.flashpixVersionField;
            }
            set {
                this.flashpixVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<byte> ColorSpace {
            get {
                return this.colorSpaceField;
            }
            set {
                this.colorSpaceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<byte> SensingMethod {
            get {
                return this.sensingMethodField;
            }
            set {
                this.sensingMethodField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<byte> ExposureMode {
            get {
                return this.exposureModeField;
            }
            set {
                this.exposureModeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<byte> WhiteBalance {
            get {
                return this.whiteBalanceField;
            }
            set {
                this.whiteBalanceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<byte> SceneCaptureType {
            get {
                return this.sceneCaptureTypeField;
            }
            set {
                this.sceneCaptureTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<byte> Sharpness {
            get {
                return this.sharpnessField;
            }
            set {
                this.sharpnessField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid OriginalId {
            get {
                return this.originalIdField;
            }
            set {
                this.originalIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/ShutterTale.NetTiers/")]
    public partial class MediaImage : MediaImageBase {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18058")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/ShutterTale.NetTiers/")]
    public enum CommandType {
        
        /// <remarks/>
        Text,
        
        /// <remarks/>
        StoredProcedure,
        
        /// <remarks/>
        TableDirect,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaProvider_DeleteCompletedEventHandler(object sender, MediaProvider_DeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaProvider_DeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaProvider_DeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaProvider_FindCompletedEventHandler(object sender, MediaProvider_FindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaProvider_FindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaProvider_FindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Media[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Media[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaProvider_GetAllCompletedEventHandler(object sender, MediaProvider_GetAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaProvider_GetAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaProvider_GetAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Media[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Media[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaProvider_GetPagedCompletedEventHandler(object sender, MediaProvider_GetPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaProvider_GetPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaProvider_GetPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Media[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Media[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaProvider_GetByIdCompletedEventHandler(object sender, MediaProvider_GetByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaProvider_GetByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaProvider_GetByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Media Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Media)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaProvider_InsertCompletedEventHandler(object sender, MediaProvider_InsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaProvider_InsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaProvider_InsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Media Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Media)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaProvider_BulkInsertCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaProvider_UpdateCompletedEventHandler(object sender, MediaProvider_UpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaProvider_UpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaProvider_UpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Media Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Media)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaImageProvider_DeleteCompletedEventHandler(object sender, MediaImageProvider_DeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaImageProvider_DeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaImageProvider_DeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaImageProvider_FindCompletedEventHandler(object sender, MediaImageProvider_FindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaImageProvider_FindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaImageProvider_FindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaImage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaImage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaImageProvider_GetAllCompletedEventHandler(object sender, MediaImageProvider_GetAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaImageProvider_GetAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaImageProvider_GetAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaImage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaImage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaImageProvider_GetPagedCompletedEventHandler(object sender, MediaImageProvider_GetPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaImageProvider_GetPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaImageProvider_GetPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaImage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaImage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaImageProvider_GetByIdCompletedEventHandler(object sender, MediaImageProvider_GetByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaImageProvider_GetByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaImageProvider_GetByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaImage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaImage)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaImageProvider_InsertCompletedEventHandler(object sender, MediaImageProvider_InsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaImageProvider_InsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaImageProvider_InsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaImage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaImage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaImageProvider_BulkInsertCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaImageProvider_UpdateCompletedEventHandler(object sender, MediaImageProvider_UpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaImageProvider_UpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaImageProvider_UpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaImage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaImage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaVideoProvider_DeleteCompletedEventHandler(object sender, MediaVideoProvider_DeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaVideoProvider_DeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaVideoProvider_DeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaVideoProvider_FindCompletedEventHandler(object sender, MediaVideoProvider_FindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaVideoProvider_FindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaVideoProvider_FindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaVideo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaVideo[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaVideoProvider_GetAllCompletedEventHandler(object sender, MediaVideoProvider_GetAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaVideoProvider_GetAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaVideoProvider_GetAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaVideo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaVideo[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaVideoProvider_GetPagedCompletedEventHandler(object sender, MediaVideoProvider_GetPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaVideoProvider_GetPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaVideoProvider_GetPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaVideo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaVideo[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaVideoProvider_GetByIdCompletedEventHandler(object sender, MediaVideoProvider_GetByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaVideoProvider_GetByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaVideoProvider_GetByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaVideo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaVideo)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaVideoProvider_InsertCompletedEventHandler(object sender, MediaVideoProvider_InsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaVideoProvider_InsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaVideoProvider_InsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaVideo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaVideo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaVideoProvider_BulkInsertCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaVideoProvider_UpdateCompletedEventHandler(object sender, MediaVideoProvider_UpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaVideoProvider_UpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaVideoProvider_UpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaVideo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaVideo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaAudioProvider_DeleteCompletedEventHandler(object sender, MediaAudioProvider_DeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaAudioProvider_DeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaAudioProvider_DeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaAudioProvider_FindCompletedEventHandler(object sender, MediaAudioProvider_FindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaAudioProvider_FindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaAudioProvider_FindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaAudio[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaAudio[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaAudioProvider_GetAllCompletedEventHandler(object sender, MediaAudioProvider_GetAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaAudioProvider_GetAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaAudioProvider_GetAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaAudio[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaAudio[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaAudioProvider_GetPagedCompletedEventHandler(object sender, MediaAudioProvider_GetPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaAudioProvider_GetPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaAudioProvider_GetPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaAudio[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaAudio[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaAudioProvider_GetByIdCompletedEventHandler(object sender, MediaAudioProvider_GetByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaAudioProvider_GetByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaAudioProvider_GetByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaAudio Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaAudio)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaAudioProvider_InsertCompletedEventHandler(object sender, MediaAudioProvider_InsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaAudioProvider_InsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaAudioProvider_InsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaAudio Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaAudio)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaAudioProvider_BulkInsertCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MediaAudioProvider_UpdateCompletedEventHandler(object sender, MediaAudioProvider_UpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MediaAudioProvider_UpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MediaAudioProvider_UpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaAudio Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaAudio)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void PreviewsProvider_DeleteCompletedEventHandler(object sender, PreviewsProvider_DeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PreviewsProvider_DeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PreviewsProvider_DeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void PreviewsProvider_FindCompletedEventHandler(object sender, PreviewsProvider_FindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PreviewsProvider_FindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PreviewsProvider_FindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Previews[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Previews[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void PreviewsProvider_GetAllCompletedEventHandler(object sender, PreviewsProvider_GetAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PreviewsProvider_GetAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PreviewsProvider_GetAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Previews[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Previews[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void PreviewsProvider_GetPagedCompletedEventHandler(object sender, PreviewsProvider_GetPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PreviewsProvider_GetPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PreviewsProvider_GetPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Previews[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Previews[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void PreviewsProvider_GetByMediumIdCompletedEventHandler(object sender, PreviewsProvider_GetByMediumIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PreviewsProvider_GetByMediumIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PreviewsProvider_GetByMediumIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Previews[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Previews[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void PreviewsProvider_GetByIdCompletedEventHandler(object sender, PreviewsProvider_GetByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PreviewsProvider_GetByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PreviewsProvider_GetByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Previews Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Previews)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void PreviewsProvider_InsertCompletedEventHandler(object sender, PreviewsProvider_InsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PreviewsProvider_InsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PreviewsProvider_InsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Previews Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Previews)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void PreviewsProvider_BulkInsertCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void PreviewsProvider_UpdateCompletedEventHandler(object sender, PreviewsProvider_UpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PreviewsProvider_UpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PreviewsProvider_UpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Previews Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Previews)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ExecuteNonQueryCompletedEventHandler(object sender, ExecuteNonQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteNonQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteNonQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ExecuteNonQuery1CompletedEventHandler(object sender, ExecuteNonQuery1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteNonQuery1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteNonQuery1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ExecuteDataSetCompletedEventHandler(object sender, ExecuteDataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteDataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteDataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ExecuteDataSet1CompletedEventHandler(object sender, ExecuteDataSet1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteDataSet1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteDataSet1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ExecuteScalarCompletedEventHandler(object sender, ExecuteScalarCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteScalarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteScalarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ExecuteScalar1CompletedEventHandler(object sender, ExecuteScalar1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteScalar1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteScalar1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591